{"version":3,"file":"pfelement.umd.min.js","sources":["../_temp/reveal.js","../_temp/polyfills--pfelement.js","../_temp/pfelement.umd.js","../_temp/attrDefValidators.js"],"sourcesContent":["let logger = () => null;\n\n/**\n * Reveal web components when loading is complete by removing the unresolved attribute\n * from the body tag; log the event.\n * @throws debugging log indicating the reveal event\n */\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\n/**\n * Auto-reveal functionality prevents a flash of unstyled content before components\n * have finished loading.\n * @param {function} logFunction\n * @see https://github.com/github/webcomponentsjs#webcomponents-loaderjs\n */\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\n/**\n * Reveal web components when loading is complete and log event.\n * @throws debugging log indicating the web components are ready\n */\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","// @POLYFILL  Array.includes\n/** @see https://tc39.github.io/ecma262/#sec-array.prototype.includes */\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, \"includes\", {\n    value: function (valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      var n = fromIndex | 0;\n\n      // 5. If n â‰¥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === \"number\" && typeof y === \"number\" && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        }\n        // c. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    },\n  });\n}\n\n// @POLYFILL Object.entries\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries */\nif (!Object.entries) {\n  Object.entries = function (obj) {\n    var ownProps = Object.keys(obj),\n      i = ownProps.length,\n      resArray = new Array(i); // preallocate the Array\n    while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];\n\n    return resArray;\n  };\n}\n\n// @POLYFILL String.startsWith\n/** @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#polyfill */\nif (!String.prototype.startsWith) {\n  Object.defineProperty(String.prototype, \"startsWith\", {\n    value: function (search, rawPos) {\n      var pos = rawPos > 0 ? rawPos | 0 : 0;\n      return this.substring(pos, pos + search.length) === search;\n    },\n  });\n}\n\n// @POLYFILL  Element.closest\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n    do {\n      if (el.matches(s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n    return null;\n  };\n}\n\n// @POLYFILL  Element.matches\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n","/*!\n * PatternFly Elements: PFElement 1.9.3\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nimport { isAllowedType, isValidDefaultType } from \"./attrDefValidators.js\";\n// Import polyfills: includes\nimport \"./polyfills--pfelement.js\";\n\n// /**\n//  * Global prefix used for all components in the project.\n//  * @constant {String}\n//  * */\nconst prefix = \"pfe\";\n\n/**\n * @class PFElement\n * @extends HTMLElement\n * @version 1.9.3\n * @classdesc Serves as the baseline for all PatternFly Element components.\n */\nclass PFElement extends HTMLElement {\n  /**\n   * A boolean value that indicates if the logging should be printed to the console; used for debugging.\n   * For use in a JS file or script tag; can also be added in the constructor of a component during development.\n   * @example PFElement.debugLog(true);\n   * @tags debug\n   */\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      // wrap localStorage references in a try/catch; merely referencing it can\n      // throw errors in some locked down environments\n      try {\n        localStorage.pfeLog = !!preference;\n      } catch (e) {\n        // if localStorage fails, fall back to PFElement._debugLog\n        PFElement._debugLog = !!preference;\n        return PFElement._debugLog;\n      }\n    }\n    // @TODO the reference to _debugLog is for backwards compatibiilty and will be removed in 2.0\n    return localStorage.pfeLog === \"true\" || PFElement._debugLog;\n  }\n\n  /**\n   * A boolean value that indicates if the performance should be tracked.\n   * For use in a JS file or script tag; can also be added in the constructor of a component during development.\n   * @example PFElement._trackPerformance = true;\n   */\n  static trackPerformance(preference = null) {\n    if (preference !== null) {\n      PFElement._trackPerformance = !!preference;\n    }\n    return PFElement._trackPerformance;\n  }\n\n  /**\n   * A object that contains configuration set outside of pfe.\n   *\n   * @example const config = PFElement.config;\n   */\n  static get config() {\n    // @TODO: Add config validation in the future.\n    return window.PfeConfig || {};\n  }\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   *\n   * @example PFElement.log(\"Hello\");\n   */\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  /**\n   * Local logging that outputs the tag name as a prefix automatically\n   *\n   * @example this.log(\"Hello\");\n   */\n  log(...msgs) {\n    PFElement.log(`[${this.tag}${this.id ? `#${this.id}` : \"\"}]`, ...msgs);\n  }\n\n  /**\n   * A console warning wrapper which formats your output with useful debugging information.\n   *\n   * @example PFElement.warn(\"Hello\");\n   */\n  static warn(...msgs) {\n    console.warn(...msgs);\n  }\n\n  /**\n   * Local warning wrapper that outputs the tag name as a prefix automatically.\n   * For use inside a component's function.\n   * @example this.warn(\"Hello\");\n   */\n  warn(...msgs) {\n    PFElement.warn(`[${this.tag}${this.id ? `#${this.id}` : ``}]`, ...msgs);\n  }\n\n  /**\n   * A console error wrapper which formats your output with useful debugging information.\n   * For use inside a component's function.\n   * @example PFElement.error(\"Hello\");\n   */\n  static error(...msgs) {\n    throw new Error([...msgs].join(\" \"));\n  }\n\n  /**\n   * Local error wrapper that outputs the tag name as a prefix automatically.\n   * For use inside a component's function.\n   * @example this.error(\"Hello\");\n   */\n  error(...msgs) {\n    PFElement.error(`[${this.tag}${this.id ? `#${this.id}` : ``}]`, ...msgs);\n  }\n\n  /**\n   * A global definition of component types (a general way of defining the purpose of a\n   * component and how it is put together).\n   */\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\",\n    };\n  }\n\n  /**\n   * The current version of a component; set by the compiler using the package.json data.\n   */\n  static get version() {\n    return \"1.9.3\";\n  }\n\n  /**\n   * A local alias to the static version.\n   * For use in the console to validate version being loaded.\n   * @example PfeAccordion.version\n   */\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  /**\n   * Global property definitions: properties managed by the base class that apply to all components.\n   */\n  static get properties() {\n    return {\n      pfelement: {\n        title: \"Upgraded flag\",\n        type: Boolean,\n        default: true,\n        observer: \"_upgradeObserver\",\n      },\n      on: {\n        title: \"Context\",\n        description: \"Describes the visual context (backgrounds).\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        default: (el) => el.contextVariable,\n        observer: \"_onObserver\",\n      },\n      context: {\n        title: \"Context hook\",\n        description: \"Lets you override the system-set context.\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        observer: \"_contextObserver\",\n      },\n      // @TODO: Deprecated with 1.0\n      oldTheme: {\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        alias: \"context\",\n        attr: \"pfe-theme\",\n      },\n      _style: {\n        title: \"Custom styles\",\n        type: String,\n        attr: \"style\",\n        observer: \"_inlineStyleObserver\",\n      },\n      type: {\n        title: \"Component type\",\n        type: String,\n        values: [\"container\", \"content\", \"combo\"],\n      },\n    };\n  }\n\n  static get observedAttributes() {\n    const properties = this.allProperties;\n    if (properties) {\n      const oa = Object.keys(properties)\n        .filter((prop) => properties[prop].observer || properties[prop].cascade || properties[prop].alias)\n        .map((p) => this._convertPropNameToAttrName(p));\n      return [...oa];\n    }\n  }\n\n  /**\n   * A quick way to fetch a random ID value.\n   * _Note:_ All values are prefixes with `pfe` automatically to ensure an ID-safe value is returned.\n   *\n   * @example this.id = this.randomID;\n   */\n  get randomId() {\n    return `${prefix}-` + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Set the --context variable with the provided value in this component.\n   */\n  set contextVariable(value) {\n    this.cssVariable(\"context\", value);\n  }\n\n  /**\n   * Get the current value of the --context variable in this component.\n   * @return {string} [dark|light|saturated]\n   */\n  get contextVariable() {\n    /* @DEPRECATED --theme in 1.0, to be removed in 2.0 */\n    return this.cssVariable(\"context\") || this.cssVariable(\"theme\");\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   * @returns {boolean}\n   * @example if(this.hasLightDOM()) this._init();\n   */\n  hasLightDOM() {\n    return this.children.length || this.textContent.trim().length;\n  }\n\n  /**\n   * Returns a boolean statement of whether or not that slot exists in the light DOM.\n   *\n   * @example this.hasSlot(\"header\");\n   */\n  hasSlot(name) {\n    if (!name) {\n      this.warn(`Please provide at least one slot name for which to search.`);\n      return;\n    }\n\n    switch (typeof name) {\n      case \"string\":\n        return (\n          [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name)\n            .length > 0\n        );\n      case \"array\":\n        return name.reduce(\n          (n) =>\n            [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === n)\n              .length > 0\n        );\n      default:\n        this.warn(\n          `Did not recognize the type of the name provided to hasSlot; this funciton can accept a string or an array.`\n        );\n        return;\n    }\n  }\n\n  /**\n   * Given a slot name, returns elements assigned to the slot as an arry.\n   * If no value is provided (i.e., `this.getSlot()`), it returns all children not assigned to a slot (without a slot attribute).\n   *\n   * @example: `this.getSlot(\"header\")`\n   */\n  getSlot(name = \"unassigned\") {\n    if (name !== \"unassigned\") {\n      return [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name);\n    } else {\n      return [...this.children].filter((child) => !child.hasAttribute(\"slot\"));\n    }\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n      return value;\n    }\n    return window.getComputedStyle(element).getPropertyValue(name).trim() || null;\n  }\n\n  /**\n   * This alerts nested components to a change in the context\n   */\n  contextUpdate() {\n    // Loop over light DOM elements, find direct descendants that are components\n    const lightEls = [...this.querySelectorAll(\"*\")]\n      .filter((item) => item.tagName.toLowerCase().slice(0, 4) === `${prefix}-`)\n      // Closest will return itself or it's ancestor matching that selector\n      .filter((item) => {\n        // If there is no parent element, return null\n        if (!item.parentElement) return;\n        // Otherwise, find the closest component that's this one\n        else return item.parentElement.closest(`[${this._pfeClass._getCache(\"prop2attr\").pfelement}]`) === this;\n      });\n\n    // Loop over shadow elements, find direct descendants that are components\n    let shadowEls = [...this.shadowRoot.querySelectorAll(\"*\")]\n      .filter((item) => item.tagName.toLowerCase().slice(0, 4) === `${prefix}-`)\n      // Closest will return itself or it's ancestor matching that selector\n      .filter((item) => {\n        // If there is a parent element and we can find another web component in the ancestor tree\n        if (item.parentElement && item.parentElement.closest(`[${this._pfeClass._getCache(\"prop2attr\").pfelement}]`)) {\n          return item.parentElement.closest(`[${this._pfeClass._getCache(\"prop2attr\").pfelement}]`) === this;\n        }\n        // Otherwise, check if the host matches this context\n        if (item.getRootNode().host === this) return true;\n\n        // If neither state is true, return false\n        return false;\n      });\n\n    const nestedEls = lightEls.concat(shadowEls);\n\n    // If nested elements don't exist, return without processing\n    if (nestedEls.length === 0) return;\n\n    // Loop over the nested elements and reset their context\n    nestedEls.map((child) => {\n      this.log(`Update context of ${child.tagName.toLowerCase()}`);\n      Promise.all([customElements.whenDefined(child.tagName.toLowerCase())]).then(() => {\n        // Ask the component to recheck it's context in case it changed\n        child.resetContext(this.on);\n      });\n    });\n  }\n\n  resetContext(fallback) {\n    if (this.isIE11) return;\n\n    // Priority order for context values to be pulled from:\n    //--> 1. context (OLD: pfe-theme)\n    //--> 2. --context (OLD: --theme)\n    let value = this.context || this.contextVariable || fallback;\n\n    // Validate that the current context (this.on) and the new context (value) are the same OR\n    // no context is set and there isn't a new context being set\n    if (this.on === value || (!this.on && !value)) return;\n\n    this.log(`Resetting context from ${this.on} to ${value || \"null\"}`);\n    this.on = value;\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this._parseObserver = this._parseObserver.bind(this);\n    this.isIE11 = /MSIE|Trident|Edge\\//.test(window.navigator.userAgent);\n\n    // Set up the mark ID based on existing ID on component if it exists\n    if (!this.id) {\n      this._markId = this.randomId.replace(\"pfe\", this.tag);\n    } else if (this.id.startsWith(\"pfe-\") && !this.id.startsWith(this.tag)) {\n      this._markId = this.id.replace(\"pfe\", this.tag);\n    } else {\n      this._markId = `${this.tag}-${this.id}`;\n    }\n\n    this._markCount = 0;\n\n    // TODO: Deprecated for 1.0 release\n    this.schemaProps = pfeClass.schemaProperties;\n\n    // TODO: Migrate this out of schema for 1.0\n    this.slots = pfeClass.slots;\n\n    this.template = document.createElement(\"template\");\n\n    // Set the default value to the passed in type\n    if (type && this._pfeClass.allProperties.type) this._pfeClass.allProperties.type.default = type;\n\n    // Initalize the properties and attributes from the property getter\n    this._initializeProperties();\n\n    this.attachShadow({ mode: \"open\" });\n\n    // Tracks if the component has been initially rendered. Useful if for debouncing\n    // template updates.\n    this._rendered = false;\n\n    if (!delayRender) this.render();\n  }\n\n  /**\n   * Standard connected callback; fires when the component is added to the DOM.\n   */\n  connectedCallback() {\n    this._initializeAttributeDefaults();\n\n    if (window.ShadyCSS) window.ShadyCSS.styleElement(this);\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\") {\n      this._slotsObserver = new MutationObserver(() => this._initializeSlots(this.tag, this.slots));\n      this._initializeSlots(this.tag, this.slots);\n    }\n  }\n\n  /**\n   * Standard disconnected callback; fires when a componet is removed from the DOM.\n   * Add your removeEventListeners here.\n   */\n  disconnectedCallback() {\n    if (this._cascadeObserver) this._cascadeObserver.disconnect();\n    if (this._slotsObserver) this._slotsObserver.disconnect();\n  }\n\n  /**\n   * Attribute changed callback fires when attributes are updated.\n   * This combines the global and the component-specific logic.\n   */\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.allProperties) return;\n\n    let propName = this._pfeClass._attr2prop(attr);\n\n    const propDef = this._pfeClass.allProperties[propName];\n\n    // If the attribute that changed derives from a property definition\n    if (propDef) {\n      // If the property/attribute pair has an alias, copy the new value to the alias target\n      if (propDef.alias) {\n        const aliasedPropDef = this._pfeClass.allProperties[propDef.alias];\n        const aliasedAttr = this._pfeClass._prop2attr(propDef.alias);\n        const aliasedAttrVal = this.getAttribute(aliasedAttr);\n        if (aliasedAttrVal !== newVal) {\n          this[propDef.alias] = this._castPropertyValue(aliasedPropDef, newVal);\n        }\n      }\n\n      // If the property/attribute pair has an observer, fire it\n      // Observers receive the oldValue and the newValue from the attribute changed callback\n      if (propDef.observer) {\n        this[propDef.observer](this._castPropertyValue(propDef, oldVal), this._castPropertyValue(propDef, newVal));\n      }\n\n      // If the property/attribute pair has a cascade target, copy the attribute to the matching elements\n      // Note: this handles the cascading of new/updated attributes\n      if (propDef.cascade) {\n        this._copyAttribute(attr, this._pfeClass._convertSelectorsToArray(propDef.cascade));\n      }\n    }\n  }\n\n  /**\n   * Standard render function.\n   */\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n\n    this.log(`render`);\n\n    // Cascade properties to the rendered template\n    this.cascadeProperties();\n\n    // Update the display context\n    this.contextUpdate();\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-rendered`);\n\n        if (this._markCount < 1) {\n          this._markCount = this._markCount + 1;\n\n          // Navigation start, i.e., the browser first sees that the user has navigated to the page\n          performance.measure(`${this._markId}-from-navigation-to-first-render`, undefined, `${this._markId}-rendered`);\n\n          // Render is run before connection unless delayRender is used\n          performance.measure(\n            `${this._markId}-from-defined-to-first-render`,\n            `${this._markId}-defined`,\n            `${this._markId}-rendered`\n          );\n        }\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\" && this._slotsObserver) {\n      this._slotsObserver.observe(this, { childList: true });\n    }\n\n    // If an observer was defined, set it to begin observing here\n    if (this._cascadeObserver) {\n      this._cascadeObserver.observe(this, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n      });\n    }\n\n    this._rendered = true;\n  }\n\n  /**\n   * A wrapper around an event dispatch to standardize formatting.\n   */\n  emitEvent(name, { bubbles = true, cancelable = false, composed = true, detail = {} } = {}) {\n    if (detail) this.log(`Custom event: ${name}`, detail);\n    else this.log(`Custom event: ${name}`);\n\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail,\n      })\n    );\n  }\n\n  /**\n   * Handles the cascading of properties to nested components when new elements are added\n   * Attribute updates/additions are handled by the attribute callback\n   */\n  cascadeProperties(nodeList) {\n    const cascade = this._pfeClass._getCache(\"cascadingProperties\");\n\n    if (cascade) {\n      if (this._cascadeObserver) this._cascadeObserver.disconnect();\n\n      let selectors = Object.keys(cascade);\n      // Find out if anything in the nodeList matches any of the observed selectors for cacading properties\n      if (nodeList) {\n        selectors = [];\n        [...nodeList].forEach((nodeItem) => {\n          Object.keys(cascade).map((selector) => {\n            // if this node has a match function (i.e., it's an HTMLElement, not\n            // a text node), see if it matches the selector, otherwise drop it (like it's hot).\n            if (nodeItem.matches && nodeItem.matches(selector)) {\n              selectors.push(selector);\n            }\n          });\n        });\n      }\n\n      // If a match was found, cascade each attribute to the element\n      if (selectors) {\n        const components = selectors\n          .filter((item) => item.slice(0, prefix.length + 1) === `${prefix}-`)\n          .map((name) => customElements.whenDefined(name));\n\n        if (components)\n          Promise.all(components).then(() => {\n            this._copyAttributes(selectors, cascade);\n          });\n        else this._copyAttributes(selectors, cascade);\n      }\n\n      // @TODO This is here for IE11 processing; can move this after deprecation\n      if (this._rendered && this._cascadeObserver)\n        this._cascadeObserver.observe(this, {\n          attributes: true,\n          childList: true,\n          subtree: true,\n        });\n    }\n  }\n\n  /* --- Observers for global properties --- */\n\n  /**\n   * This responds to changes in the pfelement attribute; indicates if the component upgraded\n   * @TODO maybe we should use just the attribute instead of the class?\n   * https://github.com/angular/angular/issues/15399#issuecomment-318785677\n   */\n  _upgradeObserver() {\n    this.classList.add(\"PFElement\");\n  }\n\n  /**\n   * This responds to changes in the context attribute; manual override tool\n   */\n  _contextObserver(oldValue, newValue) {\n    if (newValue && ((oldValue && oldValue !== newValue) || !oldValue)) {\n      this.log(`Running the context observer`);\n      this.on = newValue;\n      this.cssVariable(\"context\", newValue);\n    }\n  }\n\n  /**\n   * This responds to changes in the context; source of truth for components\n   */\n  _onObserver(oldValue, newValue) {\n    if ((oldValue && oldValue !== newValue) || (newValue && !oldValue)) {\n      this.log(`Context update`);\n      // Fire an event for child components\n      this.contextUpdate();\n    }\n  }\n\n  /**\n   * This responds to inline style changes and greps for context or theme updates.\n   * @TODO: --theme will be deprecated in 2.0\n   */\n  _inlineStyleObserver(oldValue, newValue) {\n    if (oldValue === newValue) return;\n    // If there are no inline styles, a context might have been deleted, so call resetContext\n    if (!newValue) this.resetContext();\n    else {\n      this.log(`Style observer activated on ${this.tag}`, `${newValue || \"null\"}`);\n      // Grep for context/theme\n      const regex = /--[\\w|-]*(?:context|theme):\\s*(?:\\\"*(light|dark|saturated)\\\"*)/gi;\n      let match = regex.exec(newValue);\n\n      // If no match is returned, exit the observer\n      if (!match) return;\n\n      const newContext = match[1];\n      // If the new context value differs from the on value, update\n      if (newContext !== this.on && !this.context) this.on = newContext;\n    }\n  }\n\n  /**\n   * This is connected with a mutation observer that watches for updates to the light DOM\n   * and pushes down the cascading values\n   */\n  _parseObserver(mutationsList) {\n    // Iterate over the mutation list, look for cascade updates\n    for (let mutation of mutationsList) {\n      // If a new node is added, attempt to cascade attributes to it\n      if (mutation.type === \"childList\" && mutation.addedNodes.length) {\n        this.cascadeProperties(mutation.addedNodes);\n      }\n    }\n  }\n  /* --- End observers --- */\n\n  /**\n   * Validate that the property meets the requirements for type and naming.\n   */\n  static _validateProperties() {\n    for (let propName in this.allProperties) {\n      const propDef = this.allProperties[propName];\n\n      // Verify that properties conform to the allowed data types\n      if (!isAllowedType(propDef)) {\n        this.error(`Property \"${propName}\" on ${this.name} must have type String, Number, or Boolean.`);\n      }\n\n      // Verify the property name conforms to our naming rules\n      if (!/^[a-z_]/.test(propName)) {\n        this.error(\n          `Property ${this.name}.${propName} defined, but prop names must begin with a lower-case letter or an underscore`\n        );\n      }\n\n      const isFunction = typeof propDef.default === \"function\";\n\n      // If the default value is not the same type as defined by the property\n      // and it's not a function (we can't validate the output of the function\n      // on the class level), throw a warning\n      if (propDef.default && !isValidDefaultType(propDef) && !isFunction)\n        this.error(\n          `[${this.name}] The default value \\`${propDef.default}\\` does not match the assigned type ${propDef.type.name} for the \\'${propName}\\' property`\n        );\n    }\n  }\n\n  /**\n   * Convert provided property value to the correct type as defined in the properties method.\n   */\n  _castPropertyValue(propDef, attrValue) {\n    switch (propDef.type) {\n      case Number:\n        // map various attribute string values to their respective\n        // desired property values\n        return {\n          [attrValue]: Number(attrValue),\n          null: null,\n          NaN: NaN,\n          undefined: undefined,\n        }[attrValue];\n\n      case Boolean:\n        return attrValue !== null;\n\n      case String:\n        return {\n          [attrValue]: attrValue,\n          undefined: undefined,\n        }[attrValue];\n\n      default:\n        return attrValue;\n    }\n  }\n\n  /**\n   * Map provided value to the attribute name on the component.\n   */\n  _assignValueToAttribute(obj, attr, value) {\n    // If the default is false and the property is boolean, we don't need to do anything\n    const isBooleanFalse = obj.type === Boolean && !value;\n    const isNull = value === null;\n    const isUndefined = typeof value === \"undefined\";\n\n    // If the attribute is not defined, set the default value\n    if (isBooleanFalse || isNull || isUndefined) {\n      this.removeAttribute(attr);\n    } else {\n      // Boolean values get an empty string: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n      if (obj.type === Boolean && typeof value === \"boolean\") {\n        this.setAttribute(attr, \"\");\n      } else {\n        // Validate against the provided values\n        if (obj.values) {\n          this._validateAttributeValue(obj, attr, value);\n        }\n\n        // Still accept the value provided even if it's not valid\n        this.setAttribute(attr, value);\n      }\n    }\n  }\n\n  /**\n   * Maps the defined slots into an object that is easier to query\n   */\n  _initializeSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n\n    if (this._slotsObserver) this._slotsObserver.disconnect();\n\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach((slot) => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.getSlot(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.getSlot(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter((child) => !child.hasAttribute(\"slot\"));\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n\n    this.log(\"Slots validated.\");\n\n    if (this._slotsObserver) this._slotsObserver.observe(this, { childList: true });\n  }\n\n  /**\n   * Sets up the property definitions based on the properties method.\n   */\n  _initializeProperties() {\n    const properties = this._pfeClass.allProperties;\n    let hasCascade = false;\n\n    if (Object.keys(properties).length > 0) this.log(`Initialize properties`);\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      // Check if the property exists, throw a warning if it does.\n      // HTMLElements have a LOT of properties; it wouldn't be hard\n      // to overwrite one accidentally.\n      if (typeof this[propName] !== \"undefined\") {\n        this.log(\n          `Property \"${propName}\" on ${this.constructor.name} cannot be defined because the property name is reserved`\n        );\n      } else {\n        const attrName = this._pfeClass._prop2attr(propName);\n        if (propDef.cascade) hasCascade = true;\n\n        Object.defineProperty(this, propName, {\n          get: () => {\n            const attrValue = this.getAttribute(attrName);\n\n            return this._castPropertyValue(propDef, attrValue);\n          },\n          set: (rawNewVal) => {\n            // Assign the value to the attribute\n            this._assignValueToAttribute(propDef, attrName, rawNewVal);\n\n            return rawNewVal;\n          },\n          writeable: true,\n          enumerable: true,\n          configurable: false,\n        });\n      }\n    }\n\n    // If any of the properties has cascade, attach a new mutation observer to the component\n    if (hasCascade) {\n      this._cascadeObserver = new MutationObserver(this._parseObserver);\n    }\n  }\n\n  /**\n   * Intialize the default value for an attribute.\n   */\n  _initializeAttributeDefaults() {\n    const properties = this._pfeClass.allProperties;\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      const attrName = this._pfeClass._prop2attr(propName);\n\n      if (propDef.hasOwnProperty(\"default\")) {\n        let value = propDef.default;\n\n        // Check if default is a function\n        if (typeof propDef.default === \"function\") {\n          value = propDef.default(this);\n        }\n\n        // If the attribute has not already been set, assign the default value\n        if (!this.hasAttribute(attrName)) {\n          // Assign the value to the attribute\n          this._assignValueToAttribute(propDef, attrName, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate the value against provided values.\n   */\n  // @TODO add support for a validation function\n  _validateAttributeValue(propDef, attr, value) {\n    if (\n      Array.isArray(propDef.values) &&\n      propDef.values.length > 0 &&\n      !propDef.values.includes(value) // ||\n      // (typeof propDef.values === \"string\" && propDef.values !== value) ||\n      // (typeof propDef.values === \"function\" && !propDef.values(value))\n    ) {\n      this.warn(\n        `${value} is not a valid value for ${attr}. Please provide one of the following values: ${propDef.values.join(\n          \", \"\n        )}`\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   * Look up an attribute name linked to a given property name.\n   */\n  static _prop2attr(propName) {\n    return this._getCache(\"prop2attr\")[propName];\n  }\n\n  /**\n   * Look up an property name linked to a given attribute name.\n   */\n  static _attr2prop(attrName) {\n    return this._getCache(\"attr2prop\")[attrName];\n  }\n\n  /**\n   * Convert a property name to an attribute name.\n   */\n  static _convertPropNameToAttrName(propName) {\n    const propDef = this.allProperties[propName];\n\n    if (propDef.attr) {\n      return propDef.attr;\n    }\n\n    return propName\n      .replace(/^_/, \"\")\n      .replace(/^[A-Z]/, (l) => l.toLowerCase())\n      .replace(/[A-Z]/g, (l) => `-${l.toLowerCase()}`);\n  }\n\n  /**\n   * Convert an attribute name to a property name.\n   */\n  static _convertAttrNameToPropName(attrName) {\n    for (let prop in this.allProperties) {\n      if (this.allProperties[prop].attr === attrName) {\n        return prop;\n      }\n    }\n\n    // Convert the property name to kebab case\n    const propName = attrName.replace(/-([A-Za-z])/g, (l) => l[1].toUpperCase());\n    return propName;\n  }\n\n  _copyAttributes(selectors, set) {\n    selectors.forEach((selector) => {\n      set[selector].forEach((attr) => {\n        this._copyAttribute(attr, selector);\n      });\n    });\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [...this.querySelectorAll(to), ...this.shadowRoot.querySelectorAll(to)];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  static _convertSelectorsToArray(selectors) {\n    if (selectors) {\n      if (typeof selectors === \"string\") return selectors.split(\",\");\n      else if (typeof selectors === \"object\") return selectors;\n      else {\n        this.warn(`selectors should be provided as a string, array, or object; received: ${typeof selectors}.`);\n      }\n    }\n\n    return;\n  }\n\n  static _parsePropertiesForCascade(mergedProperties) {\n    let cascadingProperties = {};\n    // Parse the properties to pull out attributes that cascade\n    for (const [propName, config] of Object.entries(mergedProperties)) {\n      let cascadeTo = this._convertSelectorsToArray(config.cascade);\n\n      // Iterate over each node in the cascade list for this property\n      if (cascadeTo)\n        cascadeTo.map((nodeItem) => {\n          let attr = this._prop2attr(propName);\n          // Create an object with the node as the key and an array of attributes\n          // that are to be cascaded down to it\n          if (!cascadingProperties[nodeItem]) cascadingProperties[nodeItem] = [attr];\n          else cascadingProperties[nodeItem].push(attr);\n        });\n    }\n\n    return cascadingProperties;\n  }\n\n  /**\n   * Caching the attributes and properties data for efficiency\n   */\n  static create(pfe) {\n    pfe._createCache();\n    pfe._populateCache(pfe);\n    pfe._validateProperties();\n    window.customElements.define(pfe.tag, pfe);\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-defined`);\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n  }\n\n  static _createCache() {\n    this._cache = {\n      properties: {},\n      globalProperties: {},\n      componentProperties: {},\n      cascadingProperties: {},\n      attr2prop: {},\n      prop2attr: {},\n    };\n  }\n\n  /**\n   * Cache an object in a given cache namespace.  This overwrites anything\n   * already in that namespace.\n   */\n  static _setCache(namespace, object) {\n    this._cache[namespace] = object;\n  }\n\n  /**\n   * Get a cached object by namespace, or get all cached objects.\n   */\n  static _getCache(namespace) {\n    return namespace ? this._cache[namespace] : this._cache;\n  }\n\n  /**\n   * Populate initial values for properties cache.\n   */\n  static _populateCache(pfe) {\n    // @TODO add a warning when a component property conflicts with a global property.\n    const mergedProperties = { ...pfe.properties, ...PFElement.properties };\n\n    pfe._setCache(\"componentProperties\", pfe.properties);\n    pfe._setCache(\"globalProperties\", PFElement.properties);\n    pfe._setCache(\"properties\", mergedProperties);\n\n    // create mapping objects to go from prop name to attrname and back\n    const prop2attr = {};\n    const attr2prop = {};\n    for (let propName in mergedProperties) {\n      const attrName = this._convertPropNameToAttrName(propName);\n      prop2attr[propName] = attrName;\n      attr2prop[attrName] = propName;\n    }\n    pfe._setCache(\"attr2prop\", attr2prop);\n    pfe._setCache(\"prop2attr\", prop2attr);\n\n    const cascadingProperties = this._parsePropertiesForCascade(mergedProperties);\n    if (Object.keys(cascadingProperties)) pfe._setCache(\"cascadingProperties\", cascadingProperties);\n  }\n\n  /**\n   * allProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get allProperties() {\n    return this._getCache(\"properties\");\n  }\n\n  /**\n   * cascadingProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get cascadingProperties() {\n    return this._getCache(\"cascadingProperties\");\n  }\n}\n\nautoReveal(PFElement.log);\n\n/** @module PFElement */\nexport default PFElement;\n","/**\n * Verify that a property definition's `type` field contains one of the allowed\n * types.  If the definition type resolves to falsy, assumes String type.\n * @param {constructor} definition\n * @default String\n * @return {Boolean} True if the definition type is one of String, Number, or Boolean\n */\nexport function isAllowedType(definition) {\n  return [String, Number, Boolean].includes(definition.type || String);\n}\n\n/**\n * Verify that a property definition's `default` value is of the correct type.\n *\n * A `default` value is valid if it's of the same type as the `type`\n * definition.  Or, if there is no `type` definition, then it must be a String\n * (the default value for `type`).\n * @param {type} definition\n * @return {Boolean} True if the default value matches the type of the definition object.\n */\nexport function isValidDefaultType(definition) {\n  return definition.hasOwnProperty(\"default\") && definition.default.constructor === definition.type;\n}\n"],"names":["logger","handleWebComponentsReady","document","body","removeAttribute","Array","prototype","includes","defineProperty","valueToFind","fromIndex","this","TypeError","o","Object","len","length","x","y","n","k","Math","max","abs","isNaN","entries","obj","ownProps","keys","i","resArray","String","startsWith","search","rawPos","pos","substring","Element","closest","s","el","matches","parentElement","parentNode","nodeType","msMatchesSelector","webkitMatchesSelector","prefix","PFElement","HTMLElement","msgs","log","tag","id","warn","error","children","textContent","trim","name","filter","child","hasAttribute","getAttribute","reduce","_this2","value","element","substr","style","setProperty","window","getComputedStyle","getPropertyValue","lightEls","querySelectorAll","item","tagName","toLowerCase","slice","_this3","_pfeClass","_getCache","pfelement","shadowEls","shadowRoot","getRootNode","host","nestedEls","concat","map","all","customElements","whenDefined","then","resetContext","on","fallback","isIE11","context","contextVariable","version","random","toString","cssVariable","preference","pfeLog","e","_debugLog","localStorage","_trackPerformance","debugLog","Error","join","PfeConfig","Boolean","properties","allProperties","oa","prop","observer","cascade","alias","p","_this4","_convertPropNameToAttrName","_initializeAttributeDefaults","ShadyCSS","styleElement","babelHelpers.typeof","slots","_slotsObserver","MutationObserver","_this5","_initializeSlots","_cascadeObserver","disconnect","attr","oldVal","newVal","propDef","aliasedPropDef","aliasedAttr","propName","_attr2prop","_prop2attr","_castPropertyValue","_copyAttribute","_convertSelectorsToArray","innerHTML","template","html","prepareTemplate","appendChild","content","cloneNode","cascadeProperties","contextUpdate","trackPerformance","mark","_markId","_markCount","measure","undefined","err","observe","childList","_rendered","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","nodeList","selectors","forEach","nodeItem","selector","push","components","Promise","_copyAttributes","classList","add","oldValue","newValue","match","exec","newContext","mutationsList","mutation","type","addedNodes","attrValue","Number","NaN","setAttribute","values","_validateAttributeValue","slot","slotExists","result","slotObj","namedSlot","_this7","getSlot","nodes","hasCascade","attrName","_this8","constructor","rawNewVal","_assignValueToAttribute","_parseObserver","hasOwnProperty","default","isArray","set","to","recipients","fname","test","isFunction","definition","replace","l","toUpperCase","split","mergedProperties","cascadingProperties","config","cascadeTo","_this10","pfe","_createCache","_populateCache","_validateProperties","define","_cache","namespace","object","_setCache","prop2attr","attr2prop","_parsePropertiesForCascade","pfeClass","delayRender","_this","bind","navigator","userAgent","randomId","schemaProps","schemaProperties","createElement","_initializeProperties","attachShadow","mode","render","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"+LAAA,IAAIA,EAAS,kBAAM,MAuCnB,SAASC,MACA,yFA/BAC,SAASC,KAAKC,gBAAgB,cCPlCC,MAAMC,UAAUC,iBACZC,eAAeH,MAAMC,UAAW,WAAY,OAC1C,SAAUG,EAAaC,MAChB,MAARC,WACI,IAAIC,UAAU,qCAIlBC,EAAIC,OAAOH,MAGXI,EAAMF,EAAEG,SAAW,KAGX,GAARD,SACK,MAccE,EAAGC,EATtBC,EAAgB,EAAZT,EAOJU,EAAIC,KAAKC,IAAS,GAALH,EAASA,EAAIJ,EAAMM,KAAKE,IAAIJ,GAAI,QAO1CC,EAAIL,GAAK,KALOE,EAQHJ,EAAEO,OARIF,EAQAT,IAPQ,iBAANQ,GAA+B,iBAANC,GAAkBM,MAAMP,IAAMO,MAAMN,UAQ9E,aAOJ,KAORJ,OAAOW,iBACHA,QAAU,SAAUC,WACrBC,EAAWb,OAAOc,KAAKF,GACzBG,EAAIF,EAASX,OACbc,EAAW,IAAIzB,MAAMwB,GAChBA,OAAcA,GAAK,CAACF,EAASE,GAAIH,EAAIC,EAASE,KAErD,OAAOC,IAMNC,OAAOzB,UAAU0B,mBACbxB,eAAeuB,OAAOzB,UAAW,aAAc,OAC7C,SAAU2B,EAAQC,GACnBC,EAAe,EAATD,EAAsB,EAATA,EAAa,SAC7BvB,KAAKyB,UAAUD,EAAKA,EAAMF,EAAOjB,UAAYiB,KAOrDI,QAAQ/B,UAAUgC,kBACbhC,UAAUgC,QAAU,SAAUC,OAChCC,EAAK7B,WAEH6B,EAAGC,QAAQF,GAAI,OAAOC,QAEZ,UADTA,EAAGE,eAAiBF,EAAGG,aACU,IAAhBH,EAAGI,iBACpB,OAMNP,QAAQ/B,UAAUmC,kBACbnC,UAAUmC,QAAUJ,QAAQ/B,UAAUuC,mBAAqBR,QAAQ/B,UAAUwC,8+CC1DjFC,EAAS,MAQTC,+TAAkBC,yEA6DfC,2CACKC,iBAAQxC,KAAKyC,KAAMzC,KAAK0C,OAAS1C,KAAK0C,GAAO,gBAAUH,8DAiB3DA,2CACII,kBAAS3C,KAAKyC,KAAMzC,KAAK0C,OAAS1C,KAAK0C,mBAAiBH,+DAiB3DA,2CACGK,mBAAU5C,KAAKyC,KAAMzC,KAAK0C,OAAS1C,KAAK0C,mBAAiBH,iDAwH5DvC,KAAK6C,SAASxC,QAAUL,KAAK8C,YAAYC,OAAO1C,uCAQjD2C,iBACDA,kBAKUA,gBAAAA,QACR,gBAGW,EADZ,YAAIhD,KAAK6C,WAAUI,OAAO,SAACC,UAAUA,EAAMC,aAAa,SAAWD,EAAME,aAAa,UAAYJ,IAC/F3C,WAEF,eACI2C,EAAKK,OACV,SAAC7C,UAEa,EADZ,YAAI8C,EAAKT,WAAUI,OAAO,SAACC,UAAUA,EAAMC,aAAa,SAAWD,EAAME,aAAa,UAAY5C,IAC/FH,kCAGFsC,6HAjBFA,yGA8BDK,yDAAO,mBACA,eAATA,EACK,YAAIhD,KAAK6C,WAAUI,OAAO,SAACC,UAAUA,EAAMC,aAAa,SAAWD,EAAME,aAAa,UAAYJ,IAElG,YAAIhD,KAAK6C,WAAUI,OAAO,SAACC,UAAWA,EAAMC,aAAa,8CAIxDH,EAAMO,OAAOC,yDAAUxD,cACJ,OAAtBgD,EAAKS,OAAO,EAAG,GAAc,KAAOT,EAAOA,EAC9CO,KACMG,MAAMC,YAAYX,EAAMO,GACzBA,GAEFK,OAAOC,iBAAiBL,GAASM,iBAAiBd,GAAMD,QAAU,wDAQnEgB,EAAW,YAAI/D,KAAKgE,iBAAiB,OACxCf,OAAO,SAACgB,UAASA,EAAKC,QAAQC,cAAcC,MAAM,EAAG,KAAUhC,QAE/Da,OAAO,SAACgB,UAEFA,EAAKlC,cAEEkC,EAAKlC,cAAcJ,YAAY0C,EAAKC,UAAUC,UAAU,aAAaC,iBAAkBH,OAF1E,IAMzBI,EAAY,YAAIzE,KAAK0E,WAAWV,iBAAiB,OAClDf,OAAO,SAACgB,UAASA,EAAKC,QAAQC,cAAcC,MAAM,EAAG,KAAUhC,QAE/Da,OAAO,SAACgB,UAEHA,EAAKlC,eAAiBkC,EAAKlC,cAAcJ,YAAY0C,EAAKC,UAAUC,UAAU,aAAaC,eACtFP,EAAKlC,cAAcJ,YAAY0C,EAAKC,UAAUC,UAAU,aAAaC,iBAAkBH,EAG5FJ,EAAKU,cAAcC,OAASP,IAM9BQ,EAAYd,EAASe,OAAOL,GAGT,IAArBI,EAAUxE,UAGJ0E,IAAI,SAAC7B,KACRV,yBAAyBU,EAAMgB,QAAQC,uBACpCa,IAAI,CAACC,eAAeC,YAAYhC,EAAMgB,QAAQC,iBAAiBgB,KAAK,aAEpEC,aAAaf,EAAKgB,6CAKjBC,GACPtF,KAAKuF,SAKLhC,EAAQvD,KAAKwF,SAAWxF,KAAKyF,iBAAmBH,EAIhDtF,KAAKqF,KAAO9B,IAAWvD,KAAKqF,IAAO9B,UAElCf,8BAA8BxC,KAAKqF,WAAS9B,GAAS,cACrD8B,GAAK9B,2CAhNHvD,KAAKsE,UAAUoB,gDAmEZtD,MAAY1B,KAAKiF,SAASC,SAAS,IAAInC,OAAO,EAAG,yCAMzCF,QACbsC,YAAY,UAAWtC,0BASrBvD,KAAK6F,YAAY,YAAc7F,KAAK6F,YAAY,kDA1MzCC,yDAAa,QACR,OAAfA,mBAIaC,SAAWD,EACxB,MAAOE,YAEGC,YAAcH,EACjBzD,EAAU4D,gBAIU,SAAxBC,aAAaH,QAAqB1D,EAAU4D,yDAQ7BH,yDAAa,YAChB,OAAfA,MACQK,oBAAsBL,GAE3BzD,EAAU8D,sDAmBb9D,EAAU+D,wBACJ5D,wEAmBFG,mFAiBMJ,+CACR,IAAI8D,MAAM,UAAI9D,GAAM+D,KAAK,4CA/CxB1C,OAAO2C,WAAa,0CAgEpB,WACM,oBACF,gBACF,+CAQF,iDAgBA,WACM,OACF,qBACDC,iBACG,WACC,uBAER,OACK,sBACM,mDACPpF,cACE,CAAC,QAAS,OAAQ,qBACjB,SAACS,UAAOA,EAAG4D,0BACV,uBAEH,OACA,2BACM,iDACPrE,cACE,CAAC,QAAS,OAAQ,sBAChB,6BAGF,MACFA,cACE,CAAC,QAAS,OAAQ,mBACnB,eACD,oBAEA,OACC,qBACDA,YACA,iBACI,6BAEN,OACG,sBACDA,cACE,CAAC,YAAa,UAAW,iEAM/BqF,EAAazG,KAAK0G,iBACpBD,EAAY,KACRE,EAAKxG,OAAOc,KAAKwF,GACpBxD,OAAO,SAAC2D,UAASH,EAAWG,GAAMC,UAAYJ,EAAWG,GAAME,SAAWL,EAAWG,GAAMG,QAC3FhC,IAAI,SAACiC,UAAMC,EAAKC,2BAA2BF,uBACnCL,wEAyMRQ,+BAEDvD,OAAOwD,UAAUxD,OAAOwD,SAASC,aAAarH,MAGxB,WAAtBsH,EAAOtH,KAAKuH,cACTC,eAAiB,IAAIC,iBAAiB,kBAAMC,EAAKC,iBAAiBD,EAAKjF,IAAKiF,EAAKH,cACjFI,iBAAiB3H,KAAKyC,IAAKzC,KAAKuH,uDASnCvH,KAAK4H,kBAAkB5H,KAAK4H,iBAAiBC,aAC7C7H,KAAKwH,gBAAgBxH,KAAKwH,eAAeK,8DAOtBC,EAAMC,EAAQC,OAK/BC,EAMIC,EACAC,EAXLnI,KAAKsE,UAAUoC,gBAEhB0B,EAAWpI,KAAKsE,UAAU+D,WAAWP,IAEnCG,EAAUjI,KAAKsE,UAAUoC,cAAc0B,MAKvCH,EAAQlB,QACJmB,EAAiBlI,KAAKsE,UAAUoC,cAAcuB,EAAQlB,OACtDoB,EAAcnI,KAAKsE,UAAUgE,WAAWL,EAAQlB,OAC/B/G,KAAKoD,aAAa+E,KAClBH,SAChBC,EAAQlB,OAAS/G,KAAKuI,mBAAmBL,EAAgBF,KAM9DC,EAAQpB,eACLoB,EAAQpB,UAAU7G,KAAKuI,mBAAmBN,EAASF,GAAS/H,KAAKuI,mBAAmBN,EAASD,IAKhGC,EAAQnB,cACL0B,eAAeV,EAAM9H,KAAKsE,UAAUmE,yBAAyBR,EAAQnB,qDASzEpC,WAAWgE,UAAY,QACvBC,SAASD,UAAY1I,KAAK4I,KAE3BhF,OAAOwD,iBACFA,SAASyB,gBAAgB7I,KAAK2I,SAAU3I,KAAKyC,UAGjDiC,WAAWoE,YAAY9I,KAAK2I,SAASI,QAAQC,WAAU,SAEvDxG,mBAGAyG,yBAGAC,gBAED7G,EAAU8G,mCAEEC,KAAQpJ,KAAKqJ,qBAErBrJ,KAAKsJ,WAAa,SACfA,WAAatJ,KAAKsJ,WAAa,cAGxBC,QAAWvJ,KAAKqJ,gDAA2CG,EAAcxJ,KAAKqJ,iCAG9EE,QACPvJ,KAAKqJ,wCACLrJ,KAAKqJ,mBACLrJ,KAAKqJ,sBAGZ,MAAOI,QACFjH,4DAKiB,WAAtB8E,EAAOtH,KAAKuH,QAAsBvH,KAAKwH,qBACpCA,eAAekC,QAAQ1J,KAAM,CAAE2J,WAAW,IAI7C3J,KAAK4H,uBACFA,iBAAiB8B,QAAQ1J,KAAM,aACtB,aACD,WACF,SAIR4J,WAAY,oCAMT5G,gEAA6E,OAArE6G,QAAAA,oBAAgBC,WAAAA,oBAAoBC,SAAAA,oBAAiBC,OAAAA,aAAS,KAC1EA,EAAQhK,KAAKwC,qBAAqBQ,EAAQgH,GACzChK,KAAKwC,qBAAqBQ,QAE1BiH,cACH,IAAIC,YAAYlH,EAAM,yFAaRmH,OAMVC,SALAtD,EAAU9G,KAAKsE,UAAUC,UAAU,uBAErCuC,IACE9G,KAAK4H,kBAAkB5H,KAAK4H,iBAAiBC,aAE7CuC,EAAYjK,OAAOc,KAAK6F,GAExBqD,MACU,eACRA,IAAUE,QAAQ,SAACC,UACdrJ,KAAK6F,GAAS/B,IAAI,SAACwF,GAGpBD,EAASxI,SAAWwI,EAASxI,QAAQyI,MAC7BC,KAAKD,QAOnBH,KACIK,EAAaL,EAChBnH,OAAO,SAACgB,UAASA,EAAKG,MAAM,EAAGhC,EAAO/B,OAAS,KAAU+B,QACzD2C,IAAI,SAAC/B,UAASiC,eAAeC,YAAYlC,MAG1C0H,QAAQ1F,IAAIyF,GAAYtF,KAAK,aACtBwF,gBAAgBP,EAAWtD,KAE/B9G,KAAK2K,gBAAgBP,EAAWtD,IAInC9G,KAAK4J,WAAa5J,KAAK4H,kBACzB5H,KAAK4H,iBAAiB8B,QAAQ1J,KAAM,aACtB,aACD,WACF,qDAaV4K,UAAUC,IAAI,sDAMJC,EAAUC,GACrBA,IAAcD,GAAYA,IAAaC,IAAcD,UAClDtI,yCACA6C,GAAK0F,OACLlF,YAAY,UAAWkF,wCAOpBD,EAAUC,IACfD,GAAYA,IAAaC,GAAcA,IAAaD,UAClDtI,2BAEA0G,8DAQY4B,EAAUC,GACzBD,IAAaC,IAEZA,QAEEvI,mCAAmCxC,KAAKyC,QAAUsI,GAAY,UAG/DC,EADU,mEACIC,KAAKF,OAKjBG,EAAaF,EAAM,MAENhL,KAAKqF,IAAOrF,KAAKwF,UAASxF,KAAKqF,GAAK6F,KAZ1ClL,KAAKoF,uDAoBP+F,0CAEQA,iDAAe,KAA3BC,UAEe,cAAlBA,EAASC,MAAwBD,EAASE,WAAWjL,aAClD4I,kBAAkBmC,EAASE,sIAwCnBrD,EAASsD,gBAClBtD,EAAQoD,WACTG,qBAIAD,EAAYC,OAAOD,eACd,gBACDE,0BACMjC,KACX+B,QAEC/E,eACkB,OAAd+E,OAEJnK,qBAEAmK,EAAYA,wBACF/B,KACX+B,kBAGKA,mDAOWxK,EAAK+G,EAAMvE,GAEVxC,EAAIsK,OAAS7E,UAAYjD,GACvB,OAAVA,QACsB,IAAVA,OAIpB9D,gBAAgBqI,GAGjB/G,EAAIsK,OAAS7E,SAA4B,kBAAVjD,OAC5BmI,aAAa5D,EAAM,KAGpB/G,EAAI4K,aACDC,wBAAwB7K,EAAK+G,EAAMvE,QAIrCmI,aAAa5D,EAAMvE,6CAQbd,EAAK8E,mBACf/E,IAAI,qBAELxC,KAAKwH,gBAAgBxH,KAAKwH,eAAeK,oBAGtC5G,KAAKsG,GAAO8C,QAAQ,SAACwB,OAKpBC,EACAC,EALFC,EAAUzE,EAAMsE,GAGG,qBAAZG,gBAAAA,MACLF,GAAa,EACbC,EAAS,GAETC,EAAQC,WAGU,KADXC,EAAKC,QAAW1J,OAAQoJ,IACtBxL,WACD+L,MAAQL,KACH,GAKK,KADXG,EAAKC,WAAWN,IACdxL,WACD+L,MAAQL,KACH,IAMK,KAFX,YAAIG,EAAKrJ,WAAUI,OAAO,SAACC,UAAWA,EAAMC,aAAa,WAEvD9C,WACD+L,MAAQL,KACH,GAKbD,IACGJ,oBAAoBG,EAAQ,MAE5BpM,uBAAuBoM,WAK7BrJ,IAAI,oBAELxC,KAAKwH,gBAAgBxH,KAAKwH,eAAekC,QAAQ1J,KAAM,CAAE2J,WAAW,+DAOlElD,EAAazG,KAAKsE,UAAUoC,cAC9B2F,GAAa,EAEoB,EAAjClM,OAAOc,KAAKwF,GAAYpG,QAAYL,KAAKwC,qCAEpC4F,KAAY3B,YAAZ2B,OAWCkE,EAVFrE,EAAUxB,EAAW2B,QAKG,IAAnBmE,EAAKnE,KACT5F,iBACU4F,UAAgBmE,EAAKC,YAAYxJ,kEAG1CsJ,EAAWC,EAAKjI,UAAUgE,WAAWF,GACvCH,EAAQnB,UAASuF,GAAa,UAE3BxM,eAAe0M,EAAMnE,EAAU,KAC/B,eACGmD,EAAYgB,EAAKnJ,aAAakJ,UAE7BC,EAAKhE,mBAAmBN,EAASsD,QAErC,SAACkB,YAECC,wBAAwBzE,EAASqE,EAAUG,GAEzCA,cAEE,cACC,gBACE,MA5BXrE,GAkCLiE,SACGzE,iBAAmB,IAAIH,iBAAiBzH,KAAK2M,4EAU3CvE,EAFH3B,EAAazG,KAAKsE,UAAUoC,kBAEzB0B,KAAY3B,EAAY,KAMzBlD,EALA0E,EAAUxB,EAAW2B,GAErBkE,EAAWtM,KAAKsE,UAAUgE,WAAWF,GAEvCH,EAAQ2E,eAAe,aACrBrJ,EAAQ0E,EAAQ4E,QAGW,mBAApB5E,EAAQ4E,YACT5E,EAAQ4E,QAAQ7M,OAIrBA,KAAKmD,aAAamJ,SAEhBI,wBAAwBzE,EAASqE,EAAU/I,qDAUhC0E,EAASH,EAAMvE,UAEnC7D,MAAMoN,QAAQ7E,EAAQ0D,SACE,EAAxB1D,EAAQ0D,OAAOtL,SACd4H,EAAQ0D,OAAO/L,SAAS2D,SAIpBZ,KACAY,+BAAkCuE,mDAAqDG,EAAQ0D,OAAOrF,KACvG,OAKC/C,0CAgDO6G,EAAW2C,gBACf1C,QAAQ,SAACE,KACbA,GAAUF,QAAQ,SAACvC,KAChBU,eAAeV,EAAMyC,8CAKjBvH,EAAMgK,OACbC,cAAiBjN,KAAKgE,iBAAiBgJ,MAAQhN,KAAK0E,WAAWV,iBAAiBgJ,KAChFzJ,EAAQvD,KAAKoD,aAAaJ,GAC1BkK,EAAiB,MAAT3J,EAAgB,kBAAoB,kDAC/B0J,yDACZC,GAAOlK,EAAMO,qIAvSf,IAAI6E,KAAYpI,KAAK0G,cAAe,KACjCuB,EAAUjI,KAAK0G,cAAc0B,GCnqBhC,CAAChH,OAAQoK,OAAQhF,SAAS5G,SDsqBVqI,ECtqB8BoD,MAAQjK,cDuqBlDwB,mBAAmBwF,UAAgBpI,KAAKgD,oDAI1C,UAAUmK,KAAK/E,SACbxF,kBACS5C,KAAKgD,SAAQoF,uFAIvBgF,EAAwC,mBAApBnF,EAAQ4E,SAK9B5E,EAAQ4E,UC1qBiBQ,ED0qBcpF,GCzqB7B2E,eAAe,YAAcS,EAAWR,QAAQL,cAAgBa,EAAWhC,MDyqBjC+B,GACtDpN,KAAK4C,UACC5C,KAAKgD,6BAA6BiF,EAAQ4E,8CAA8C5E,EAAQoD,KAAKrI,kBAAkBoF,gBC5qB9H,IAA4BiF,qCDs4BfjF,UACTpI,KAAKuE,UAAU,aAAa6D,sCAMnBkE,UACTtM,KAAKuE,UAAU,aAAa+H,sDAMHlE,OAC1BH,EAAUjI,KAAK0G,cAAc0B,UAE/BH,EAAQH,MAILM,EACJkF,QAAQ,KAAM,IACdA,QAAQ,SAAU,SAACC,UAAMA,EAAEpJ,gBAC3BmJ,QAAQ,SAAU,SAACC,aAAUA,EAAEpJ,mEAMFmI,OAC3B,IAAI1F,KAAQ5G,KAAK0G,iBAChB1G,KAAK0G,cAAcE,GAAMkB,OAASwE,SAC7B1F,SAKM0F,EAASgB,QAAQ,eAAgB,SAACC,UAAMA,EAAE,GAAGC,iEAqBhCpD,MAC1BA,EAAW,IACY,iBAAdA,EAAwB,OAAOA,EAAUqD,MAAM,KACrD,GAAyB,qBAAdrD,gBAAAA,IAAwB,OAAOA,OAExCzH,wFAAqFyH,gBAAAA,6DAO9DsD,cAC5BC,EAAsB,sCAEOxN,OAAOW,QAAQ4M,kDAAmB,kCAAvDtF,EAAUwF,GAChBC,EAAYC,EAAKrF,yBAAyBmF,EAAO9G,SAGjD+G,GACFA,EAAU9I,IAAI,SAACuF,OACTxC,EAAOgG,EAAKxF,WAAWF,GAGtBuF,EAAoBrD,GACpBqD,EAAoBrD,GAAUE,KAAK1C,GADJ6F,EAAoBrD,GAAY,CAACxC,sGAKpE6F,iCAMKI,QACRC,iBACAC,eAAeF,KACfG,6BACGjJ,eAAekJ,OAAOJ,EAAItL,IAAKsL,GAElC1L,EAAU8G,mCAEEC,KAAQpJ,KAAKqJ,oBACzB,MAAOI,QACFjH,yGAMJ4L,OAAS,YACA,oBACM,uBACG,uBACA,aACV,aACA,sCAQEC,EAAWC,QACrBF,OAAOC,GAAaC,oCAMVD,UACRA,EAAYrO,KAAKoO,OAAOC,GAAarO,KAAKoO,8CAM7BL,OAEdL,OAAwBK,EAAItH,WAAepE,EAAUoE,cAEvD8H,UAAU,sBAAuBR,EAAItH,cACrC8H,UAAU,mBAAoBlM,EAAUoE,cACxC8H,UAAU,aAAcb,OAKnBtF,EAFHoG,EAAY,GACZC,EAAY,OACTrG,KAAYsF,EAAkB,KAC/BpB,EAAWtM,KAAKkH,2BAA2BkB,OACvCA,GAAYkE,GACAlE,IAEpBmG,UAAU,YAAaE,KACvBF,UAAU,YAAaC,GAErBb,EAAsB3N,KAAK0O,2BAA2BhB,GACxDvN,OAAOc,KAAK0M,IAAsBI,EAAIQ,UAAU,sBAAuBZ,gDAUpE3N,KAAKuE,UAAU,iEAUfvE,KAAKuE,UAAU,yCAjtBZoK,gEAAiD,OAArCtD,KAAAA,aAAO,WAAMuD,YAAAA,gGAG9BtK,UAAYqK,IACZlM,IAAMkM,EAASlM,MACfkK,eAAiBkC,EAAKlC,eAAemC,UACrCvJ,OAAS,sBAAsB4H,KAAKvJ,OAAOmL,UAAUC,WAGrDH,EAAKnM,GAECmM,EAAKnM,GAAGrB,WAAW,UAAYwN,EAAKnM,GAAGrB,WAAWwN,EAAKpM,OAC3D4G,QAAUwF,EAAKnM,GAAG4K,QAAQ,MAAOuB,EAAKpM,OAEtC4G,QAAawF,EAAKpM,QAAOoM,EAAKnM,KAJ9B2G,QAAUwF,EAAKI,SAAS3B,QAAQ,MAAOuB,EAAKpM,OAO9C6G,WAAa,IAGb4F,YAAcP,EAASQ,mBAGvB5H,MAAQoH,EAASpH,QAEjBoB,SAAWpJ,SAAS6P,cAAc,YAGnC/D,GAAQwD,EAAKvK,UAAUoC,cAAc2E,OAAMwD,EAAKvK,UAAUoC,cAAc2E,KAAKwB,QAAUxB,KAGtFgE,0BAEAC,aAAa,CAAEC,KAAM,WAIrB3F,WAAY,EAEZgF,GAAaC,EAAKW,kBFhZpB,SAAoBC,KAChBA,MAMHC,EAAkB9L,OAAO+L,cACzBC,EAAgBF,GAAmB9L,OAAO+L,cAAcE,OAEzDH,GAAmBE,aAGfE,iBAAiB,qBAAsBxQ,GEijClDyQ,CAAW1N,EAAUG"}