{"version":3,"sources":["pfe-toast.css","pfe-toast.scss","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_mixins.scss"],"names":[],"mappings":"AAAA,gBAAgB;ACqChB;EAEE,0BAAoB;EAApB,4BAAoB;MAApB,uBAAoB;UAApB,oBAAoB;EACpB,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,8BAAmB;EAAnB,6BAAmB;EAAnB,2BAAmB;MAAnB,uBAAmB;UAAnB,mBAAmB;EACnB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAG3B,kBAAkB;EAClB,gCCiCkC;EDjClC,sHCiCkC;EDhClC,SCgCkC;EDhClC,gCCgCkC;ED/BlC,uECXkC;EDWlC,+DCXkC;EDWlC,8ICXkC;EDWlC,sICXkC;EDYlC,kBAAkB;EAElB,gBC4BkC;ED5BlC,4CC4BkC;ED3BlC,gBC2BkC;ED3BlC,4CC2BkC;AFlEpC;;AGVM;EFkCN;IElC4F,UAAA;IFoDxF,QAAQ;EDpCV;AACF;;ACqCE;EApBF;IAqBI,0BAA2C;IAA3C,sDAA2C;IAC3C,0BAA2C;IAA3C,sDAA2C;EDjC7C;AACF;;ACoCA;EACE,aAAa;ADjCf;;ACoCA;EACE,wBAAmB;ADjCrB;;ACoCA;EACG,wGAAmB;ADjCtB;;ACoCA;EACE,aAAa;ADjCf;;ACoCA;EACE,iBAAgB;EAChB,iBAAgB;EAChB,sBAAqB;EACrB,iBAAgB;EAChB,mBAAkB;EAClB,0BAAqB;EACrB,mBAAkB;ADjCpB;;ACqCE;EAEE,8BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;EAGd,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;EACvB,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,8BAAqB;EAArB,6BAAqB;EAArB,6BAAqB;MAArB,yBAAqB;UAArB,qBAAqB;EACrB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAE3B,sBCtBgC;EDsBhC,gHCtBgC;EDuBhC,oHCvBgC;UDuBhC,4GCvBgC;EDuBhC,8LCvBgC;UDuBhC,sLCvBgC;EDwBhC,cCxBgC;EDwBhC,iFCxBgC;EDyBhC,aCzBgC;EDyBhC,wFCzBgC;AFbpC;;ACwCE;EAEE,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;ADtClB;;ACwCE;EAEE,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;EAEd,6BAA6B;EAC7B,YAAY;EACZ,eAAe;EACf,SAAS;EACT,gBCvCgC;EDuChC,4MCvCgC;AFApC;;AC+BG;EAWG,aC1C8B;ED0C9B,sGC1C8B;ED2C9B,YC3C8B;ED2C9B,kDC3C8B;ED4C9B,WC5C8B;ED4C9B,gDC5C8B;AFMpC;;ACyBG;EAkBK,UCjD4B;EDiD5B,qDCjD4B;AFUpC","file":"pfe-toast.css","sourcesContent":["@charset \"UTF-8\";\n:host {\n  align-items: stretch;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n  position: absolute;\n  right: var(--pfe-toast--Right, calc(-1 * (var(--pfe-toast--MaxWidth, 500px) + var(--pfe-toast--Right--offset, 50px))));\n  top: var(--pfe-toast--Top, 50px);\n  transition: right var(--pfe-theme--animation-speed, 0.3s) var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  will-change: right;\n  max-width: var(--pfe-toast--MaxWidth, 500px);\n  min-width: var(--pfe-toast--MinWidth, 250px);\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host {\n    /* IE10+ */\n    right: 0;\n  }\n}\n\n@media only screen and (max-width: 575px) {\n  :host {\n    max-width: calc(var(--pfe-toast--MaxWidth, 500px) / 2);\n    min-width: calc(var(--pfe-toast--MinWidth, 250px) / 2);\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host(.open) {\n  --pfe-toast--Right: 50px;\n}\n\n:host(:not(.open)) {\n  --pfe-toast--Right: calc(-1 * var(--pfe-toast--MaxWidth, 500px) + var(--pfe-toast--Right--offset, 50px));\n}\n\n::slotted(:first-child) {\n  margin-top: 0;\n}\n\n::slotted(button) {\n  background:  none;\n  border-radius:  0;\n  display:  inline-block;\n  margin-bottom:  0;\n  margin-right:  1rem;\n  padding:   0.5rem  0.75rem;\n  text-align:  center;\n}\n\n.pfe-toast__container {\n  align-self: flex-start;\n  flex: 1 1 auto;\n  align-items: flex-start;\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-start;\n  background-color: var(--pfe-toast__container--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  box-shadow: var(--pfe-toast__container--BoxShadow, var(--pfe-theme--box-shadow--lg, 0 0.1875rem 0.4375rem 0.1875rem rgba(3, 3, 3, 0.13), 0 0.6875rem 1.5rem 1rem rgba(3, 3, 3, 0.12)));\n  color: var(--pfe-toast__container--Color, var(--pfe-theme--color--text, #151515));\n  padding: var(--pfe-toast__container--Padding, var(--pfe-theme--container-padding, 1rem));\n}\n\n.pfe-toast__content {\n  flex: 1 1 auto;\n}\n\n.pfe-toast__close {\n  flex: 0 0 auto;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 0;\n  padding: var(--pfe-toast__close--Padding, var(--pfe-toast__close--PaddingTop, 0) var(--pfe-toast__close--PaddingRight, 0) var(--pfe-toast__close--PaddingBottom, 0) var(--pfe-toast__close--PaddingLeft, 0));\n}\n\n.pfe-toast__close > svg {\n  fill: var(--pfe-toast__close--svg--Fill, var(--pfe-theme--color--feedback--default--darkest, #3c3f42));\n  height: var(--pfe-toast__close--svg--Height, 12px);\n  width: var(--pfe-toast__close--svg--Width, 12px);\n}\n\n.pfe-toast__close:hover > svg {\n  fill: var(--pfe-toast__close--svg--Fill--hover, #333);\n}\n","@import \"../../pfe-sass/pfe-sass\";\n$LOCAL: toast;\n\n$LOCAL-VARIABLES: (\n  Top: 50px,\n  MaxWidth: 500px,\n  MinWidth: 250px,\n  Right--offset: 50px, // needed with box-shadow\n\n  container: (\n    BackgroundColor: pfe-var(surface--lightest),\n    BoxShadow: pfe-var(box-shadow--lg),\n    Color: pfe-var(text),\n    Padding: pfe-var(container-padding)\n  ),\n\n  close: (\n    svg--Fill: pfe-var(feedback--default--darkest),\n  \tsvg--Fill--hover: #333, // @TODO: Find pf core parity\n  \tsvg--Height: 12px, //@TODO: pfe-var(icon-size)?\n  \tsvg--Width: 12px, //@TODO: pfe-var(icon-size)?\n  \n  \tPaddingTop: 0,\n  \tPaddingRight: 0,\n  \tPaddingBottom: 0,\n  \tPaddingLeft: 0\n  )\n);\n\n// Nested internal variables (pfe-local calls), maps cannot \"self-reference\"\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  Right: calc(-1 * (#{pfe-local(MaxWidth)} + #{pfe-local(Right--offset)})),\n  close: (\n    Padding: pfe-local(PaddingTop, $region: close) pfe-local(PaddingRight, $region: close) pfe-local(PaddingBottom, $region: close) pfe-local(PaddingLeft, $region: close)\n  )\n));\n\n:host {\n  // flex parent props\n  align-items: stretch;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: flex-start;\n  \n  // animation\n  position: absolute;\n  right:  pfe-local(Right);\n  top:    pfe-local(Top);\n  transition: right pfe-var(animation-speed) pfe-var(animation-timing);\n  will-change: right;\n  \n  max-width: pfe-local(MaxWidth);\n  min-width: pfe-local(MinWidth);\n\n  @include browser-query(ie11) {\n    right: 0;\n  }\n  @media only screen and (max-width: pfe-breakpoint($size: sm, $max: true)) {\n    max-width: calc(#{pfe-local(MaxWidth)} / 2);\n    min-width: calc(#{pfe-local(MinWidth)} / 2);\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host(.open) {\n  --pfe-toast--Right: 50px;\n}\n\n:host(:not(.open)){\n   --pfe-toast--Right: calc(-1 * #{pfe-local(MaxWidth)} + #{pfe-local(Right--offset)});\n}\n\n::slotted(:first-child) {\n  margin-top: 0;\n}\n\n::slotted(button) {\n  background: none;\n  border-radius: 0;\n  display: inline-block;\n  margin-bottom: 0;\n  margin-right: 1rem;\n  padding: .5rem .75rem;\n  text-align: center;\n}\n\n.pfe-toast {\n  &__container {\n    // flex child props\n    align-self: flex-start;\n    flex: 1 1 auto;\n\n    // flex parent props\n    align-items: flex-start;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: flex-start;\n\n    background-color: pfe-local(BackgroundColor, $region: container);\n    box-shadow:       pfe-local(BoxShadow, $region: container);\n    color:            pfe-local(Color, $region: container);\n    padding:          pfe-local(Padding, $region: container);\n  }\n  &__content {\n    // flex child props\n    flex: 1 1 auto;\n  }\n  &__close {\n    // flex child props\n    flex: 0 0 auto;\n\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    margin: 0;\n    padding: pfe-local(Padding, $region: close);\n    \n    & > svg {\n      fill:   pfe-local(svg--Fill, $region: close);\n      height: pfe-local(svg--Height, $region: close);\n      width:  pfe-local(svg--Width, $region: close);\n    }\n    \n    &:hover {\n      & > svg {\n        fill: pfe-local(svg--Fill--hover, $region: close);\n      }\n    }\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} "],"sourceRoot":"../src"}