{"version":3,"sources":["pfe-cta.scss","../../pfe-sass/extends/_extends.scss","pfe-cta.css","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/mixins/_custom-properties.scss"],"names":[],"mappings":"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","file":"pfe-cta.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: cta;\n \n$pfe-cta--BackgroundColor--focus: rgba(40, 151, 240, 0.2);\n$pfe-cta--Color--fallback: #003366;\n\n// Arrow animation\n$horizontal-spacing: 3px;\n$arrow-basic: 0 $horizontal-spacing;\n$arrow-hover: 0 0 0 #{$horizontal-spacing * 2};\n\n$LOCAL-VARIABLES: (\n  Padding: 0.6rem 0,\n  BorderRadius: 0,\n  BackgroundColor: transparent,\n  BackgroundColor--hover: transparent,\n  BackgroundColor--focus: $pfe-cta--BackgroundColor--focus,\n  BorderColor: transparent,\n  BorderColor--hover: transparent,\n  BorderColor--focus: transparent,\n  Color: pfe-broadcasted(link),\n  Color--hover: pfe-broadcasted(link--hover),\n  Color--focus: pfe-broadcasted(link--focus),\n  TextDecoration: none,\n  TextDecoration--hover: none,\n  TextDecoration--focus: none,\n  FontWeight: pfe-var(font-weight--bold),\n  FontFamily: pfe-var(font-family--heading),\n  FontSize:   pfe-var(FontSize--lg),\n  // @deprecated | FontSize--priority will be deprecated in 2.0\n  FontSize--priority: pfe-var(FontSize--md), \n  LineHeight: pfe-var(line-height),\n  MaxWidth: max-content,\n  arrow: (\n    Display: inline,\n    Padding: $arrow-basic,\n    size: 13px,\n    MarginLeft: calc(#{pfe-var(content-spacer)} * 0.25)\n  ),\n  inner: (\n    BorderColor: transparent,\n    BorderColor--hover: transparent,\n    BorderColor--focus: transparent\n  )\n);\n\n// Look here for the variant maps\n@import \"shared-assets\";\n\n:host {\n  display: inline-block;\n  position: relative;\n  z-index: 0;\n  vertical-align: middle;\n  max-width: pfe-local(MaxWidth);\n  background-color: pfe-local(BackgroundColor);\n  border-radius: pfe-local(BorderRadius);\n  border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor);\n  cursor: pointer;\n}\n\n::slotted(*) {\n  white-space: normal; \n  display: inline; \n  padding: pfe-local(Padding) !important;\n  color: pfe-local(Color) !important;\n  font-family: pfe-local(FontFamily);\n  font-size: pfe-local(FontSize);\n  font-weight: pfe-local(FontWeight);\n  line-height: pfe-local(LineHeight);\n  text-decoration: pfe-local(TextDecoration) !important;\n\n  :host([priority]) & {\n    font-size: pfe-local(FontSize--priority);\n    text-align: center;\n    @include browser-query(ie11) {\n      a {\n        color: pfe-local(Color) !important;\n      }\n    }\n  }\n\n  :host([aria-disabled=\"true\"]) & {\n    cursor: default !important;\n    font-size: pfe-local(FontSize, $fallback: pfe-var(FontSize--md));\n  }\n\n  :host([priority]) &,\n  :host([aria-disabled=\"true\"]) & {\n    padding: pfe-local(Padding, $fallback: pfe-var(container-padding) calc(#{pfe-var(container-padding)} * 2)) !important;\n  \n    @include browser-query(ie11) {\n      padding: pfe-fetch(container-padding) #{pfe-fetch(container-padding) * 2} !important;\n    }\n  }\n}\n\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within),\n:host(:not([aria-disabled=\"true\"]).focus-within) ::slotted(*),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:focus) {\n  outline: none !important;\n}\n\n::slotted(button),\n::slotted(input) {\n  @extend %reset-button;\n}\n\n.pfe-cta {\n  &--wrapper {\n    display: block; \n    white-space: nowrap;\n    min-width: 100%;\n\n    :host([priority]) &,\n    :host([aria-disabled=\"true\"]) & {\n      display: flex;\n      flex-flow: row nowrap;\n      align-items: center;\n      height: 100%;\n    }\n    // Default CTA arrow wrap fix for Firefox\n    :host(:not([priority]):not([aria-disabled=\"true\"])) & {\n      @include browser-query(firefox) {\n        max-width: calc(100% - 1ch - #{pfe-local(size, $region: arrow)});\n      }\n    }\n    @include browser-query(edge) {\n      button,\n      input {\n        @extend %reset-button;\n      }\n    }\n  }\n  &--inner {\n    // inner border on priority CTAs\n    display: block;\n    height: calc(100% - 4px);\n    width: calc(100% - 4px);\n\n    box-sizing: border-box;\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    z-index: -1;\n\n    border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor, $region: inner);\n    border-radius: 2px;\n    outline: none;\n  }\n  &--arrow {\n    display: pfe-local(Display, $region: arrow);\n    padding: pfe-local(Padding, $region: arrow);\n    fill:    pfe-local(Color);\n    width:   pfe-local(size, $region: arrow);\n    height:  pfe-local(size, $region: arrow);\n    transition: padding pfe-var(animation-speed) pfe-var(animation-timing);\n    margin-bottom: -1px;\n\n    @include browser-query(ie11 edge) {\n      width: 18px;\n    }\n  }\n}\n\n// Set svg to none so it won't render in nav on iOS versions 12>\n:host([priority]) svg {\n  display: none;\n}\n\n\n/// ===========================================================================\n/// BELOW THIS POINT, LOCAL VARIABLE OVERRIDES ONLY, handled by the pfe-print-local function\n/// Maps can be found in the pfe-cta/src/_shared-assets.scss file\n\n// - The location of these styles in the doc is important for clarity and specficity \n// - priority=\"primary\" sets its own background colors, so it ignores broadcast\n// - if there is no broadcast variable available, these are still seen by the browser, so we also set fallbacks here!\n// - Fallback values should match whats above\n\n\n// The value of broadcasted variables is provided by the layouts so this seems uneeded?\n// @include pfe-contexts; \n\n\n:host([priority=\"primary\"]) {\n  @include pfe-print-local($primary);\n}\n\n:host([priority=\"secondary\"]) {\n  @include pfe-print-local($secondary);\n}\n\n\n/// ===========================================================================\n/// CONTEXT CTA VARIANTS\n/// ===========================================================================\n\n\n:host([priority=\"primary\"][on=\"dark\"]),\n:host([priority=\"primary\"][on=\"saturated\"]) {\n  @include pfe-print-local($primary-saturated); \n}\n\n:host([priority=\"secondary\"][on=\"dark\"]),\n:host([priority=\"secondary\"][on=\"saturated\"]) {\n  @include pfe-print-local($secondary-dark);\n}\n\n/// ===========================================================================\n// COLOR ATTRIBUTE OVERRIDES\n// Default & Wind variant CTAs are ommitted because they use the link color, not UI colors\n/// ===========================================================================\n\n/// ===========================================================================\n/// COLOR=ACCENT\n/// ===========================================================================\n\n\n// Primary omitted because it already uses the accent color\n\n:host([priority=\"secondary\"][color=\"accent\"]) {\n  @include pfe-print-local($secondary-accent);\n}\n\n/// ===========================================================================\n/// COLOR=BASE\n/// ===========================================================================\n\n:host([priority=\"primary\"][color=\"base\"]) {\n  @include pfe-print-local($primary-base);\n}\n\n:host([priority=\"secondary\"][color=\"base\"]) {\n  @include pfe-print-local($secondary-base);\n}\n\n/// ===========================================================================\n/// WIND CTA VARIANTS\n/// ===========================================================================\n\n:host([priority=\"secondary\"][variant=\"wind\"]) {\n  @include pfe-print-local($secondary-wind);\n}\n\n// @TODO: Deprecated\n/// ===========================================================================\n/// DISABLED CTA VARIANTS\n/// ===========================================================================\n\n:host([aria-disabled=\"true\"]) {\n  @include pfe-print-local($disabled);\n}\n\n/// ===========================================================================\n/// CTA STATES: HOVER, FOCUS\n/// ===========================================================================\n\n// Note: Focus states need to be defined before hover states\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within) {\n  --pfe-cta--BackgroundColor: #{pfe-local(BackgroundColor--focus)};\n  --pfe-cta--BorderColor:     #{pfe-local(BorderColor--focus)};\n  --pfe-cta--Color:           #{pfe-local(Color--focus)};\n  --pfe-cta--TextDecoration:  #{pfe-local(TextDecoration--focus)};\n  --pfe-cta__inner--BorderColor: #{pfe-local(BorderColor--focus, $region: inner)};\n}\n\n// Note: Hover states need to be defined after focus states\n:host(:not([aria-disabled=\"true\"]):hover),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:hover) {\n  --pfe-cta--BackgroundColor: #{pfe-local(BackgroundColor--hover)};\n  --pfe-cta--BorderColor:     #{pfe-local(BorderColor--hover)};\n  --pfe-cta--Color:           #{pfe-local(Color--hover)};\n  --pfe-cta--TextDecoration:  #{pfe-local(TextDecoration--hover)};\n  --pfe-cta__inner--BorderColor: #{pfe-local(BorderColor--hover, $region: inner)};\n  --pfe-cta__arrow--Padding:     #{$arrow-hover};\n}\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-padding);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n","::slotted(button),\n::slotted(input), .pfe-cta--wrapper button,\n.pfe-cta--wrapper input {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n:host {\n  display: inline-block;\n  position: relative;\n  z-index: 0;\n  vertical-align: middle;\n  max-width: var(--pfe-cta--MaxWidth, max-content);\n  background-color: var(--pfe-cta--BackgroundColor, transparent);\n  border-radius: var(--pfe-cta--BorderRadius, 0);\n  border: var(--pfe-theme--ui--border-width, 1px) var(--pfe-theme--ui--border-style, solid) var(--pfe-cta--BorderColor, transparent);\n  cursor: pointer;\n}\n\n::slotted(*) {\n  white-space: normal;\n  display: inline;\n  padding: var(--pfe-cta--Padding, 0.6rem 0) !important;\n  color: var(--pfe-cta--Color, var(--pfe-broadcasted--link, #06c)) !important;\n  font-family: var(--pfe-cta--FontFamily, var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif));\n  font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--lg, 1.125rem));\n  font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--bold, 700));\n  line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height, 1.5));\n  text-decoration: var(--pfe-cta--TextDecoration, none) !important;\n}\n\n:host([priority]) ::slotted(*) {\n  font-size: var(--pfe-cta--FontSize--priority, var(--pf-global--FontSize--md, 1rem));\n  text-align: center;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host([priority]) ::slotted(*) {\n    /* IE10+ */\n  }\n  :host([priority]) ::slotted(*) a {\n    color: var(--pfe-cta--Color, var(--pfe-broadcasted--link, #06c)) !important;\n  }\n}\n\n:host([aria-disabled=\"true\"]) ::slotted(*) {\n  cursor: default !important;\n  font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));\n}\n\n:host([priority]) ::slotted(*),\n:host([aria-disabled=\"true\"]) ::slotted(*) {\n  padding: var(--pfe-cta--Padding, var(--pfe-theme--container-padding, 1rem) calc(var(--pfe-theme--container-padding, 1rem) * 2)) !important;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host([priority]) ::slotted(*),\n  :host([aria-disabled=\"true\"]) ::slotted(*) {\n    /* IE10+ */\n    padding: 1rem 2rem !important;\n  }\n}\n\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within),\n:host(:not([aria-disabled=\"true\"]).focus-within) ::slotted(*),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:focus) {\n  outline: none !important;\n}\n\n.pfe-cta--wrapper {\n  display: block;\n  white-space: nowrap;\n  min-width: 100%;\n}\n\n:host([priority]) .pfe-cta--wrapper,\n:host([aria-disabled=\"true\"]) .pfe-cta--wrapper {\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  height: 100%;\n}\n\n@media all and (min--moz-device-pixel-ratio: 0) {\n  :host(:not([priority]):not([aria-disabled=\"true\"])) .pfe-cta--wrapper {\n    /* Mozilla Firefox (All) */\n    max-width: calc(100% - 1ch - var(--pfe-cta__arrow--size, 13px));\n  }\n}\n\n@supports (-ms-ime-align: auto) {\n  .pfe-cta--wrapper {\n    /* Microsoft Edge Browser 16+ (All) */\n  }\n}\n\n.pfe-cta--inner {\n  display: block;\n  height: calc(100% - 4px);\n  width: calc(100% - 4px);\n  box-sizing: border-box;\n  position: absolute;\n  top: 2px;\n  left: 2px;\n  z-index: -1;\n  border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-cta__inner--BorderColor, transparent);\n  border-radius: 2px;\n  outline: none;\n}\n\n.pfe-cta--arrow {\n  display: var(--pfe-cta__arrow--Display, inline);\n  padding: var(--pfe-cta__arrow--Padding, 0 3px);\n  fill: var(--pfe-cta--Color, var(--pfe-broadcasted--link, #06c));\n  width: var(--pfe-cta__arrow--size, 13px);\n  height: var(--pfe-cta__arrow--size, 13px);\n  transition: padding var(--pfe-theme--animation-speed, 0.3s) var(--pfe-theme--animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));\n  margin-bottom: -1px;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pfe-cta--arrow {\n    /* IE10+ */\n    width: 18px;\n  }\n}\n\n@supports (-ms-ime-align: auto) {\n  .pfe-cta--arrow {\n    /* Microsoft Edge Browser 16+ (All) */\n    width: 18px;\n  }\n}\n\n:host([priority]) svg {\n  display: none;\n}\n\n:host([priority=\"primary\"]) {\n  --pfe-cta--BorderRadius: var(--pfe-theme--ui--border-radius, 2px);\n  --pfe-cta--BackgroundColor: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--BorderColor: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--Color: var(--pfe-theme--color--ui-accent--text, #fff);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--ui-accent--hover, #004080);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--ui-accent--hover, #004080);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--ui-accent--text, #fff);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--ui-accent--text, #fff);\n  --pfe-cta__arrow--Display: none;\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--ui-accent--text, #fff);\n}\n\n:host([priority=\"secondary\"]) {\n  --pfe-cta--BorderRadius: var(--pfe-theme--ui--border-radius, 2px);\n  --pfe-cta--BackgroundColor: transparent;\n  --pfe-cta--BorderColor: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-cta--Color: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-cta--BorderColor--hover: var(--pfe-broadcasted--text, #3c3f42);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--ui-base--text, #fff);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta__arrow--Display: none;\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n}\n\n:host([priority=\"primary\"][on=\"dark\"]),\n:host([priority=\"primary\"][on=\"saturated\"]) {\n  --pfe-cta--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--BorderColor: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--Color: var(--pfe-theme--color--text, #151515);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--text, #151515);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--text, #151515);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--surface--darkest, #151515);\n}\n\n:host([priority=\"secondary\"][on=\"dark\"]),\n:host([priority=\"secondary\"][on=\"saturated\"]) {\n  --pfe-cta--BackgroundColor: transparent;\n  --pfe-cta--BorderColor: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--Color: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--text, #151515);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--text, #151515);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--surface--darkest, #151515);\n}\n\n:host([priority=\"secondary\"][color=\"accent\"]) {\n  --pfe-cta--BackgroundColor: transparent;\n  --pfe-cta--BorderColor: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--Color: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--ui-accent--text, #fff);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--ui-accent, #06c);\n}\n\n:host([priority=\"primary\"][color=\"base\"]) {\n  --pfe-cta--BackgroundColor: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--BorderColor: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--Color: var(--pfe-theme--color--ui-base--text, #fff);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--ui-base--hover, #151515);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--ui-base--hover, #151515);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--ui-base--text, #fff);\n  --pfe-cta--BackgroundColor--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--surface--darker, #3c3f42);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--ui-base--text, #fff);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--ui-base--text, #fff);\n}\n\n:host([priority=\"secondary\"][color=\"base\"]) {\n  --pfe-cta--BackgroundColor: transparent;\n  --pfe-cta--BorderColor: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--Color: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--ui-base--hover, #151515);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--ui-base--hover, #151515);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--ui-base--text, #fff);\n  --pfe-cta--BackgroundColor--focus: rgba(40, 151, 240, 0.2);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-theme--color--ui-base, #6a6e73);\n}\n\n:host([priority=\"secondary\"][variant=\"wind\"]) {\n  --pfe-cta--BackgroundColor: transparent;\n  --pfe-cta--BorderColor: var(--pfe-theme--color--surface--border, #d2d2d2);\n  --pfe-cta--Color: var(--pfe-broadcasted--link, #06c);\n  --pfe-cta--FontWeight: var(--pfe-theme--font-weight--normal, 400);\n  --pfe-cta--BackgroundColor--hover: var(--pfe-theme--color--surface--border--lightest, #f5f5f5);\n  --pfe-cta--BorderColor--hover: var(--pfe-theme--color--surface--border, #d2d2d2);\n  --pfe-cta--Color--hover: var(--pfe-theme--color--link--hover, #004080);\n  --pfe-cta--TextDecoration--hover: var(--pfe-theme--link-decoration--hover, underline);\n  --pfe-cta--Color--focus: var(--pfe-theme--color--link--hover, #004080);\n  --pfe-cta--BorderColor--focus: var(--pfe-theme--color--surface--border, #d2d2d2);\n  --pfe-cta__inner--BorderColor--focus: var(--pfe-cta--BorderColor--focus, transparent);\n}\n\n:host([aria-disabled=\"true\"]) {\n  --pfe-cta__arrow--Display: none;\n  --pfe-cta--BackgroundColor: var(--pfe-theme--color--ui-disabled, #d2d2d2);\n  --pfe-cta--BorderColor: var(--pfe-theme--color--ui-disabled, #d2d2d2);\n  --pfe-cta--Color: var(--pfe-theme--color--ui-disabled--text, #6a6e73);\n}\n\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within) {\n  --pfe-cta--BackgroundColor: var(--pfe-cta--BackgroundColor--focus, rgba(40, 151, 240, 0.2));\n  --pfe-cta--BorderColor:     var(--pfe-cta--BorderColor--focus, transparent);\n  --pfe-cta--Color:           var(--pfe-cta--Color--focus, var(--pfe-broadcasted--link--focus, #004080));\n  --pfe-cta--TextDecoration:  var(--pfe-cta--TextDecoration--focus, none);\n  --pfe-cta__inner--BorderColor: var(--pfe-cta__inner--BorderColor--focus, transparent);\n}\n\n:host(:not([aria-disabled=\"true\"]):hover),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:hover) {\n  --pfe-cta--BackgroundColor: var(--pfe-cta--BackgroundColor--hover, transparent);\n  --pfe-cta--BorderColor:     var(--pfe-cta--BorderColor--hover, transparent);\n  --pfe-cta--Color:           var(--pfe-cta--Color--hover, var(--pfe-broadcasted--link--hover, #004080));\n  --pfe-cta--TextDecoration:  var(--pfe-cta--TextDecoration--hover, none);\n  --pfe-cta__inner--BorderColor: var(--pfe-cta__inner--BorderColor--hover, transparent);\n  --pfe-cta__arrow--Padding:     0 0 0 6px;\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// This will print all the broadcast variables, and set the value to the context of your choosing, like on-dark or on-saturated.\n/// @param {String} $context - Look up values from contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @see $custom-prop-prefix\n/// @see $BROADCAST-VARS\n/// @example - scss - Usage in a container component, i.e. pfe-card\n///    :host {\n///      @include pfe-set-broadcast-context(dark);\n///    }\n/// @example - css - Rendered output\n///   :host {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///\n@mixin pfe-set-broadcast-context($context, $broadcast: $BROADCAST-VARS) {\n  @each $type in $broadcast {\n    $list: ();\n    $string: \"\";\n    $context_string: \"\";\n    $state: \"\";\n\n    @if str-starts-with($type, \"link\") {\n      $list: append($list, \"#{$type}\");\n\n      @each $s in (hover, focus, visited) {\n        $state: \"--#{$s}\";\n        $string: \"#{$type}#{$state}\";\n\n        @if not index($list, $string) {\n          $list: append($list, \"#{$type}#{$state}\");\n        }\n      }\n    } @else {\n      @if not index($list, $string) {\n        $list: append($list, \"#{$type}\");\n      }\n    }\n\n    @if index($CONTEXTS, $context) != null {\n      @if $context != \"light\" {\n        $context_string: \"--on-#{$context}\";\n      }\n    }\n\n    @each $item in $list {\n      @if not index($BROADCAST-VARS, $type) {\n        @warn \"--#{$custom-prop-prefix}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n      } @else if not pfe-broadcasted(#{$item}#{$context_string}) {\n        @warn \"#{$item}#{$context_string} value does not currently exist.\";\n      } @else {\n        @if index($CONTEXTS, $context) != null {\n          --#{$custom-prop-prefix}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context_string})};\n        } @else {\n          @error \"The #{$context} context does not appear to be part of a supported context.\";\n        }\n      }\n    }\n  }\n}\n\n/// Returns CSS Variable for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example - scss\n///   :host {\n///       padding-top:      pfe-local(paddingTop);\n///       padding-bottom:   pfe-local(paddingBottom);\n///   }\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n  @each $property, $value in $map {\n    $name: \"--#{$property}\";\n    $styles: $value;\n\n    @if type-of($value) == \"map\" {\n      @each $prop, $v in $value {\n        $name: \"__#{$property}--#{$prop}\";\n        $styles: $v;\n\n        // Print the variable definition\n        --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n      }\n    } @else {\n      // Print the variable definition\n      --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n    }\n  }\n}\n\n/// Surface properties\n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct context colors.\n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n/// @example - scss - In your component stylesheet\n///   $LOCAL: band;\n///   @include pfe-surfaces;\n/// @example - css - Rendered result\n///   :host([color=\"darker\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///     --context: dark;\n///   }\n///   :host([color=\"darkest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///     --context: dark;\n///   }\n///   :host([color=\"base\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///     --context: light;\n///   }\n///   :host([color=\"lighter\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///     --context: light;\n///   }\n///   :host([color=\"lightest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///     --context: light;\n///   }\n///   :host([color=\"accent\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///     --context: saturated;\n///   }\n///   :host([color=\"complement\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///     --context: saturated;\n///   }\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: color) {\n  @each $color in $surfaces {\n    $context: #{pfe-get-context(surface--#{$color}--context)};\n    :host([#{$attr-name}=\"#{$color}\"]) {\n      @include pfe-print-local(\n        (\n          BackgroundColor: pfe-var(surface--#{$color}),\n          context: pfe-var(surface--#{$color}--context, #{$context})\n        )\n      );\n      @extend %fallback-surface;\n    }\n  }\n}\n\n/// Prints the `on` attribute with IE11 fallbacks\n/// @param {List} contexts [$CONTEXTS] - defaults to the global $CONTEXTS list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example - scss - In your component styles\n///   @include pfe-contexts; // imports on=\"light\" etc support\n/// @example - css - Rendered outputs\n///   :host([on=\"dark\"]) {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///   @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///     :host([on=\"dark\"]) {\n///       color: #fff;\n///       color: var(--pfe-theme--color--text--on-dark, #fff);\n///     }\n///   }\n///   // ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"])\n@mixin pfe-contexts($contexts: $CONTEXTS, $ie-fallback: true) {\n  // Helper attributes to aid in theming\n  @each $context in $contexts {\n    :host([on=\"#{$context}\"]) {\n      @include pfe-set-broadcast-context($context);\n    }\n  }\n  @if $ie-fallback {\n    :host {\n      @extend %fallback-text;\n    }\n  }\n}\n"],"sourceRoot":"../src"}