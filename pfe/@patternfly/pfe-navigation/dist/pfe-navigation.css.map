{"version":3,"sources":["pfe-navigation.scss","../../pfe-sass/extends/_extends.scss","pfe-navigation.css","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_mixins.scss"],"names":[],"mappings":"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","file":"pfe-navigation.css","sourcesContent":["@import \"_shared-assets\";\n\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  // Default spacing values\n  Padding--vertical:   pfe-var(container-padding),\n  Padding--horizontal: pfe-var(container-padding),\n\n  // Darkest is the default background color\n  BackgroundColor: pfe-var(surface--darkest),\n  Color:           pfe-var(text--on-dark),\n\n  // Variables for the border\n  BorderTopColor: transparent,\n  BorderColor:    transparent,\n\n  MaxHeight: 72px,\n  MobileMenuHeight: 60px,\n\n  // Nav content width\n  MaxWidth: calc(#{pfe-var(container-padding)} * 4), // 64px\n\n  // Variables for the trigger icon\n  icon: none,\n\n  // Overlay region\n  overlay: (\n    BackgroundColor: pfe-var(overlay, $fallback: rgba(37, 37, 37, 0.5))\n  ),\n\n  // Trigger region\n  trigger: (\n    FontSize: $pf-global--FontSize--md,\n    FontWeight: 100\n  ),\n\n\n  // Tray region\n  tray: (\n    Padding: pfe-var(container-padding)\n  ),\n\n  // Logo\n  logo: (\n    MinWidth: 135px\n  )\n));\n\n// Nested internal variables (pfe-local calls), maps cannot \"self-reference\"\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  Padding: 0 pfe-local(Padding--horizontal),\n  Border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor),\n));\n\n:host {\n  // Print the variables to the DOM\n  @include pfe-print-local($LOCAL-VARIABLES);\n\n  // Reduce padding for print\n  @media print {\n    --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};\n  }\n\n  display: block;\n  --pfe-accordion__base--Padding: var(--pfe-theme--container-spacer, 16px);\n  --pfe-accordion__panel-container--Padding: 0 calc(var(--pfe-accordion__base--Padding) * 3) var(--pfe-accordion__base--Padding) calc(var(--pfe-accordion__base--Padding) * 1.5);\n\n  z-index: pfe-zindex(content);\n  width: 100%;\n}\n\n:host(.pfe-sticky) {\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: pfe-zindex(navigation);\n}\n\n:host([pfe-full-width]) .pfe-navigation__container {\n  @each $size in (\"md\", \"lg\", \"xl\") {\n    @media screen and (min-width: pfe-breakpoint( #{$size} ) ) {\n      @if ($size == \"md\" or $size == \"lg\") {\n        --pfe-navigation--Width: calc(100% - #{pfe-local(Padding--horizontal)} * 4);\n      } @else if ($size == \"xl\") {\n        --pfe-navigation--Width: calc(100% - #{pfe-local(Padding--horizontal)} * 8);\n      }\n    }\n  }\n}\n\npfe-icon {\n  --pfe-icon--Color: #{pfe-local(Color)};\n}\n\n// Note: These styles do not pick up in Edge\n::slotted([slot=\"logo\"]) {\n  margin: 0 !important;\n  max-width: 100%;\n  max-height: pfe-local(MaxHeight);\n  min-width:  pfe-local($region: logo, $cssvar: MinWidth);\n  display: block;\n}\n\n::slotted([slot=\"mobile-login\"]),\n::slotted([slot=\"mobile-language\"]) {\n  color: pfe-broadcasted(link);\n  text-decoration: pfe-broadcasted(link-decoration);\n}\n\n::slotted([slot=\"mobile-menu--label\"]) {\n  font-family: pfe-local(font-family);\n  font-size:   pfe-local(FontSize);\n  font-weight: pfe-local(FontWeight);\n  color: pfe-local(Color);\n  margin-bottom: 0;\n}\n\n.pfe-navigation {\n  &__wrapper {\n    @include pfe-set-broadcast-context(dark);\n\n    display: flex;\n    position: relative; // Ensures all navigation items are aligned relative to this wrapper\n    z-index: pfe-zindex(navigation);\n\n    background-color: pfe-local(BackgroundColor);\n    color: pfe-local(Color);\n    min-height: pfe-local(MaxHeight);\n    @media only screen and (max-height: 500px) {\n      min-height: pfe-local(MobileMenuHeight);\n    }\n  }\n  &__container {\n    width: 100%;\n    //max-width: pfe-local(Width);\n    margin: 0 auto;\n    padding: 0 pfe-local(Padding--horizontal);\n\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: stretch;\n    justify-content: flex-start;\n    box-sizing: border-box;\n\n    // stop using padding, start using max width at medium breakpoint\n    @media screen and (min-width: pfe-breakpoint(md)) {\n      padding: 0;\n      max-width: var(--pfe-navigation--Width);\n    }\n   // Set the variable for use in the tray region too\n    // Loop through the other breakpoints\n    @each $size in (\"md\", \"lg\", \"xl\") {\n      @media screen and (min-width: pfe-breakpoint( #{$size} ) ) {\n        --pfe-navigation--Width: calc(#{pfe-breakpoint( #{$size} )} - #{pfe-local(MaxWidth)});\n      }\n    }\n  }\n  &__overlay {\n    display: block;\n    background-color: pfe-local(BackgroundColor, $region: overlay);\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: pfe-zindex(overlay);\n    &[hidden] {\n      display: none;\n    }\n  }\n  &__logo {\n    display: flex;\n    flex-flow: column nowrap;\n    flex-shrink: 0; // Prevent flexbox from collapsing the padding.\n    align-items: flex-start;\n    justify-content: center;\n    width: pfe-local(MinWidth, $region: logo, $fallback: 155px);\n    flex: 0 0 pfe-local(MinWidth, $region: logo);\n\n    padding-top: pfe-local(Padding--vertical);\n    padding-bottom: pfe-local(Padding--vertical);\n    padding-right: calc( #{pfe-var(container-padding)} + 9px ); // ensure gap between main menu links and logo\n\n    @media screen and (min-width: pfe-breakpoint(md)) {\n        padding-right: calc( #{pfe-var(container-padding)} * 3 );\n    }\n\n    @media screen and (max-height: 500px) {\n      padding-top: calc(#{pfe-local(Padding--vertical) / 2});\n      padding-bottom: calc(#{pfe-local(Padding--vertical) / 2});\n    }\n    @media screen and (min-width: pfe-breakpoint(\"lg-mobile\", $map: false)) {\n        flex: 0 1 10%;\n    }\n    > * {\n      display: flex;\n    }\n    @include browser-query(ie11) {\n      flex: 1 0 15%;\n    }\n    // @TODO --pfe-theme--logo--svg?\n  }\n  &__skip {\n    display: block;\n    @extend %sr-only;\n    margin: 0 -2em -1px -1px;\n  }\n  &__main {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    height: 100%;\n    width: 100%;\n    &--menu-label {\n      color: pfe-local(Color);\n    }\n    [show_search] &,\n    [show_login][show_language] & {\n      grid-gap: pfe-var(container-spacer);\n    }\n    ::slotted(*:not([hidden])) {\n      display: block;\n      grid-column: 1 / -1;\n    }\n  }\n  &__utility {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: stretch;\n    justify-content: flex-end;\n    flex: auto; //0 1 20%;\n\n      @media screen and (min-width: pfe-breakpoint(\"sm-desktop\", $map: false)) {\n        flex: auto; //0 1 30%;\n        margin-left: auto;\n        // padding-left: 48px; // ensure gap between main menu links and utility links\n    }\n  }\n}\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-padding);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n",".pfe-navigation__skip {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n:host {\n  --pfe-navigation--sm-mobile: 500px;\n  --pfe-navigation--lg-mobile: 640px;\n  --pfe-navigation--sm-desktop: 1024px;\n  --pfe-navigation--Padding--vertical: var(--pfe-theme--container-padding, 1rem);\n  --pfe-navigation--Padding--horizontal: var(--pfe-theme--container-padding, 1rem);\n  --pfe-navigation--BackgroundColor: var(--pfe-theme--color--surface--darkest, #151515);\n  --pfe-navigation--Color: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-navigation--BorderTopColor: transparent;\n  --pfe-navigation--BorderColor: transparent;\n  --pfe-navigation--MaxHeight: 72px;\n  --pfe-navigation--MobileMenuHeight: 60px;\n  --pfe-navigation--MaxWidth: calc(var(--pfe-theme--container-padding, 1rem) * 4);\n  --pfe-navigation--icon: none;\n  --pfe-navigation__overlay--BackgroundColor: var(--pfe-theme--color--overlay, rgba(37, 37, 37, 0.5));\n  --pfe-navigation__trigger--FontSize: 16px;\n  --pfe-navigation__trigger--FontWeight: 100;\n  --pfe-navigation__tray--Padding: var(--pfe-theme--container-padding, 1rem);\n  --pfe-navigation__logo--MinWidth: 135px;\n  --pfe-navigation--Padding: 0 var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem));\n  --pfe-navigation--Border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-navigation--BorderColor, transparent);\n  display: block;\n  --pfe-accordion__base--Padding: var(--pfe-theme--container-spacer, 16px);\n  --pfe-accordion__panel-container--Padding: 0 calc(var(--pfe-accordion__base--Padding) * 3) var(--pfe-accordion__base--Padding) calc(var(--pfe-accordion__base--Padding) * 1.5);\n  z-index: var(--pfe-theme--zindex--content, 0);\n  width: 100%;\n}\n\n@media print {\n  :host {\n    --pfe-navigation--Padding: calc(var(--pfe-navigation--Padding--vertical, var(--pfe-theme--container-padding, 1rem)) / 2) var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem));\n  }\n}\n\n:host(.pfe-sticky) {\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: var(--pfe-theme--zindex--navigation, 95);\n}\n\n@media screen and (min-width: 768px) {\n  :host([pfe-full-width]) .pfe-navigation__container {\n    --pfe-navigation--Width: calc(100% - var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem)) * 4);\n  }\n}\n\n@media screen and (min-width: 992px) {\n  :host([pfe-full-width]) .pfe-navigation__container {\n    --pfe-navigation--Width: calc(100% - var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem)) * 4);\n  }\n}\n\n@media screen and (min-width: 1200px) {\n  :host([pfe-full-width]) .pfe-navigation__container {\n    --pfe-navigation--Width: calc(100% - var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem)) * 8);\n  }\n}\n\npfe-icon {\n  --pfe-icon--Color: var(--pfe-navigation--Color, var(--pfe-theme--color--text--on-dark, #fff));\n}\n\n::slotted([slot=\"logo\"]) {\n  margin: 0 !important;\n  max-width: 100%;\n  max-height: var(--pfe-navigation--MaxHeight, 72px);\n  min-width: var(--pfe-navigation__logo--MinWidth, 135px);\n  display: block;\n}\n\n::slotted([slot=\"mobile-login\"]),\n::slotted([slot=\"mobile-language\"]) {\n  color: var(--pfe-broadcasted--link, #06c);\n  text-decoration: var(--pfe-broadcasted--link-decoration, none);\n}\n\n::slotted([slot=\"mobile-menu--label\"]) {\n  font-family: var(--pfe-navigation--font-family);\n  font-size: var(--pfe-navigation--FontSize);\n  font-weight: var(--pfe-navigation--FontWeight);\n  color: var(--pfe-navigation--Color, var(--pfe-theme--color--text--on-dark, #fff));\n  margin-bottom: 0;\n}\n\n.pfe-navigation__wrapper {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-broadcasted--text--muted: var(--pfe-theme--color--text--muted--on-dark, #d2d2d2);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #73bcf7);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #bee1f4);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #bee1f4);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #bee1f4);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-dark, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-dark, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-dark, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-dark, none);\n  display: flex;\n  position: relative;\n  z-index: var(--pfe-theme--zindex--navigation, 95);\n  background-color: var(--pfe-navigation--BackgroundColor, var(--pfe-theme--color--surface--darkest, #151515));\n  color: var(--pfe-navigation--Color, var(--pfe-theme--color--text--on-dark, #fff));\n  min-height: var(--pfe-navigation--MaxHeight, 72px);\n}\n\n@media only screen and (max-height: 500px) {\n  .pfe-navigation__wrapper {\n    min-height: var(--pfe-navigation--MobileMenuHeight, 60px);\n  }\n}\n\n.pfe-navigation__container {\n  width: 100%;\n  margin: 0 auto;\n  padding: 0 var(--pfe-navigation--Padding--horizontal, var(--pfe-theme--container-padding, 1rem));\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: flex-start;\n  box-sizing: border-box;\n}\n\n@media screen and (min-width: 768px) {\n  .pfe-navigation__container {\n    padding: 0;\n    max-width: var(--pfe-navigation--Width);\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .pfe-navigation__container {\n    --pfe-navigation--Width: calc(768px - var(--pfe-navigation--MaxWidth, calc(var(--pfe-theme--container-padding, 1rem) * 4)));\n  }\n}\n\n@media screen and (min-width: 992px) {\n  .pfe-navigation__container {\n    --pfe-navigation--Width: calc(992px - var(--pfe-navigation--MaxWidth, calc(var(--pfe-theme--container-padding, 1rem) * 4)));\n  }\n}\n\n@media screen and (min-width: 1200px) {\n  .pfe-navigation__container {\n    --pfe-navigation--Width: calc(1200px - var(--pfe-navigation--MaxWidth, calc(var(--pfe-theme--container-padding, 1rem) * 4)));\n  }\n}\n\n.pfe-navigation__overlay {\n  display: block;\n  background-color: var(--pfe-navigation__overlay--BackgroundColor, var(--pfe-theme--color--overlay, rgba(37, 37, 37, 0.5)));\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: var(--pfe-theme--zindex--overlay, 90);\n}\n\n.pfe-navigation__overlay[hidden] {\n  display: none;\n}\n\n.pfe-navigation__logo {\n  display: flex;\n  flex-flow: column nowrap;\n  flex-shrink: 0;\n  align-items: flex-start;\n  justify-content: center;\n  width: var(--pfe-navigation__logo--MinWidth, 155px);\n  flex: 0 0 var(--pfe-navigation__logo--MinWidth, 135px);\n  padding-top: var(--pfe-navigation--Padding--vertical, var(--pfe-theme--container-padding, 1rem));\n  padding-bottom: var(--pfe-navigation--Padding--vertical, var(--pfe-theme--container-padding, 1rem));\n  padding-right: calc( var(--pfe-theme--container-padding, 1rem) + 9px);\n}\n\n@media screen and (min-width: 768px) {\n  .pfe-navigation__logo {\n    padding-right: calc( var(--pfe-theme--container-padding, 1rem) * 3);\n  }\n}\n\n@media screen and (max-height: 500px) {\n  .pfe-navigation__logo {\n    padding-top: calc(var(--pfe-navigation--Padding--vertical, var(--pfe-theme--container-padding, 1rem))/2);\n    padding-bottom: calc(var(--pfe-navigation--Padding--vertical, var(--pfe-theme--container-padding, 1rem))/2);\n  }\n}\n\n@media screen and (min-width: 640px) {\n  .pfe-navigation__logo {\n    flex: 0 1 10%;\n  }\n}\n\n.pfe-navigation__logo > * {\n  display: flex;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pfe-navigation__logo {\n    /* IE10+ */\n    flex: 1 0 15%;\n  }\n}\n\n.pfe-navigation__skip {\n  display: block;\n  margin: 0 -2em -1px -1px;\n}\n\n.pfe-navigation__main {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  height: 100%;\n  width: 100%;\n}\n\n.pfe-navigation__main--menu-label {\n  color: var(--pfe-navigation--Color, var(--pfe-theme--color--text--on-dark, #fff));\n}\n\n[show_search] .pfe-navigation__main,\n[show_login][show_language] .pfe-navigation__main {\n  grid-gap: var(--pfe-theme--container-spacer, 1rem);\n}\n\n.pfe-navigation__main ::slotted(*:not([hidden])) {\n  display: block;\n  grid-column: 1 / -1;\n}\n\n.pfe-navigation__utility {\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: flex-end;\n  flex: auto;\n}\n\n@media screen and (min-width: 1024px) {\n  .pfe-navigation__utility {\n    flex: auto;\n    margin-left: auto;\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// This will print all the broadcast variables, and set the value to the context of your choosing, like on-dark or on-saturated.\n/// @param {String} $context - Look up values from contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @see $custom-prop-prefix\n/// @see $BROADCAST-VARS\n/// @example - scss - Usage in a container component, i.e. pfe-card\n///    :host {\n///      @include pfe-set-broadcast-context(dark);\n///    }\n/// @example - css - Rendered output\n///   :host {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///\n@mixin pfe-set-broadcast-context($context, $broadcast: $BROADCAST-VARS) {\n  @each $type in $broadcast {\n    $list: ();\n    $string: \"\";\n    $context_string: \"\";\n    $state: \"\";\n\n    @if str-starts-with($type, \"link\") {\n      $list: append($list, \"#{$type}\");\n\n      @each $s in (hover, focus, visited) {\n        $state: \"--#{$s}\";\n        $string: \"#{$type}#{$state}\";\n\n        @if not index($list, $string) {\n          $list: append($list, \"#{$type}#{$state}\");\n        }\n      }\n    } @else {\n      @if not index($list, $string) {\n        $list: append($list, \"#{$type}\");\n      }\n    }\n\n    @if index($CONTEXTS, $context) != null {\n      @if $context != \"light\" {\n        $context_string: \"--on-#{$context}\";\n      }\n    }\n\n    @each $item in $list {\n      @if not index($BROADCAST-VARS, $type) {\n        @warn \"--#{$custom-prop-prefix}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n      } @else if not pfe-broadcasted(#{$item}#{$context_string}) {\n        @warn \"#{$item}#{$context_string} value does not currently exist.\";\n      } @else {\n        @if index($CONTEXTS, $context) != null {\n          --#{$custom-prop-prefix}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context_string})};\n        } @else {\n          @error \"The #{$context} context does not appear to be part of a supported context.\";\n        }\n      }\n    }\n  }\n}\n\n/// Returns CSS Variable for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example - scss\n///   :host {\n///       padding-top:      pfe-local(paddingTop);\n///       padding-bottom:   pfe-local(paddingBottom);\n///   }\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n  @each $property, $value in $map {\n    $name: \"--#{$property}\";\n    $styles: $value;\n\n    @if type-of($value) == \"map\" {\n      @each $prop, $v in $value {\n        $name: \"__#{$property}--#{$prop}\";\n        $styles: $v;\n\n        // Print the variable definition\n        --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n      }\n    } @else {\n      // Print the variable definition\n      --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n    }\n  }\n}\n\n/// Surface properties\n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct context colors.\n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n/// @example - scss - In your component stylesheet\n///   $LOCAL: band;\n///   @include pfe-surfaces;\n/// @example - css - Rendered result\n///   :host([color=\"darker\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///     --context: dark;\n///   }\n///   :host([color=\"darkest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///     --context: dark;\n///   }\n///   :host([color=\"base\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///     --context: light;\n///   }\n///   :host([color=\"lighter\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///     --context: light;\n///   }\n///   :host([color=\"lightest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///     --context: light;\n///   }\n///   :host([color=\"accent\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///     --context: saturated;\n///   }\n///   :host([color=\"complement\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///     --context: saturated;\n///   }\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: color) {\n  @each $color in $surfaces {\n    $context: #{pfe-get-context(surface--#{$color}--context)};\n    :host([#{$attr-name}=\"#{$color}\"]) {\n      @include pfe-print-local(\n        (\n          BackgroundColor: pfe-var(surface--#{$color}),\n          context: pfe-var(surface--#{$color}--context, #{$context})\n        )\n      );\n      @extend %fallback-surface;\n    }\n  }\n}\n\n/// Prints the `on` attribute with IE11 fallbacks\n/// @param {List} contexts [$CONTEXTS] - defaults to the global $CONTEXTS list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example - scss - In your component styles\n///   @include pfe-contexts; // imports on=\"light\" etc support\n/// @example - css - Rendered outputs\n///   :host([on=\"dark\"]) {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///   @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///     :host([on=\"dark\"]) {\n///       color: #fff;\n///       color: var(--pfe-theme--color--text--on-dark, #fff);\n///     }\n///   }\n///   // ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"])\n@mixin pfe-contexts($contexts: $CONTEXTS, $ie-fallback: true) {\n  // Helper attributes to aid in theming\n  @each $context in $contexts {\n    :host([on=\"#{$context}\"]) {\n      @include pfe-set-broadcast-context($context);\n    }\n  }\n  @if $ie-fallback {\n    :host {\n      @extend %fallback-text;\n    }\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} "],"sourceRoot":"../src"}