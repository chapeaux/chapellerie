{"version":3,"sources":["pfe-dropdown.scss","pfe-dropdown.css","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAsDA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,eAAe;ACrDjB;;ADwDA;EACE,kMAA0C;ACrD5C;;ADwDA;;EAEE,kMAA0C;EAC1C,wLAAoC;ACrDtC;;ADwDA;EACE,aAAa;ACrDf;;ADwDA;EACE,mFAAgC;EAChC,8BAA4B;ACrD9B;;ADmDA;EAII,oBAAoB;ACnDxB;;ADwDE;EACE,kBAAkB;EAClB,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,yBAA8B;EAA9B,sCAA8B;MAA9B,sBAA8B;UAA9B,8BAA8B;EAC9B,yBETgC;EFShC,4FETgC;EFUhC,eEVgC;EFUhC,8CEVgC;EFWhC,wCEXgC;EFWhC,oREXgC;EFYhC,eEZgC;EFYhC,8EEZgC;EFahC,oBEvDgC;EFuDhC,mDEvDgC;EFwDhC,gBEdgC;EFchC,iDEdgC;EFehC,gBEzDgC;EFyDhC,+CEzDgC;EF0DhC,cEhBgC;EFgBhC,wEEhBgC;EFiBhC,6BEjBgC;EFiBhC,mEEjBgC;EFkBhC,YElBgC;EFkBhC,yCElBgC;EFmBhC,eAAe;ACrDnB;;ADsCG;EAiBG,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,WAAW;EACX,iBE3B8B;EF2B9B,yIE3B8B;EF4B9B,mBE5B8B;EF4B9B,2IE5B8B;EF6B9B,yBE7B8B;EF6B9B,8JE7B8B;EF8B9B,2BE9B8B;EF8B9B,oKE9B8B;EF+B9B,4BE/B8B;EF+B9B,8KE/B8B;EFgC9B,0BEhC8B;EFgC9B,iKEhC8B;ADnBpC;;ADqDI;EACE,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;AClDzB;;ADoDI;EACE,mCAA2D;EAA3D,uEAA2D;EAC3D,kBAAkB;EAClB,WEpF8B;EFoF9B,wCEpF8B;EFqF9B,8CE3C8B;EF4C9B,8BAAsD;EAAtD,kEAAsD;EACtD,iBEvF8B;EFuF9B,qDEvF8B;EFwF9B,gBExF8B;EFwF9B,+CExF8B;ADuCpC;;ADoDE;EACE,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,WE/FgC;EF+FhC,8CE/FgC;EFgGhC,uDEtDgC;EFsDhC,+IEtDgC;EFuDhC,SEvDgC;EFuDhC,4CEvDgC;EFwDhC,gBExDgC;EFwDhC,wGExDgC;EFyDhC,4BAA4B;EAC5B,iBE1DgC;EF0DhC,6FE1DgC;EF2DhC,mBE3DgC;EF2DhC,+FE3DgC;EF4DhC,yBE5DgC;EF4DhC,iEE5DgC;EF6DhC,2IE7DgC;UF6DhC,mIE7DgC;EF6DhC,mNE7DgC;UF6DhC,2ME7DgC;EF8DhC,gBAAgB;EAChB,8BAAsB;UAAtB,sBAAsB;EACtB,eEhEgC;EFgEhC,oDEhEgC;ADepC;;ADkCG;EAiBG,cAAc;AC/CpB","file":"pfe-dropdown.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n@import \"_shared-assets\";\n\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (\n  MinWidth: calc(#{pfe-var(container-spacer)} * 2),\n  MaxWidth: 100%,\n  FontSize: pfe-var(FontSize--md),\n  FontWeight: 400,\n  LineHeight: pfe-var(line-height),\n  Color: pfe-broadcasted(text),\n  BackgroundColor: transparent,\n  Border: none,\n  before: (\n    BorderWidth: pfe-var(ui--border-width),\n    BorderWidth--hover: calc(#{pfe-var(ui--border-width)} * 2),\n    BorderStyle: pfe-var(ui--border-style),\n    BorderTopColor: pfe-var(surface--lighter),\n    BorderRightColor: pfe-var(surface--lighter),\n    BorderBottomColor: pfe-var(surface--border--darker),\n    BorderBottomColor--hover: pfe-var(ui-base),\n    BorderLeftColor: pfe-var(surface--lighter)\n  ),\n  menu: (\n    spacing--horizontal: 0,\n    Margin: 0,\n    BackgroundColor: pfe-var(surface--lightest),\n    BorderWidth: pfe-var(ui--border-width),\n    BorderStyle: pfe-var(ui--border-style),\n    BorderColor: transparent,\n    BoxShadow: pfe-var(box-shadow--sm),\n    MinWidth: 100%\n  )\n));\n\n// TODO: This will be removed at 1.0 in favor of size\n$backwards-compatibility: (\n  before: (\n    BorderWidth: pfe-local(BorderWidth--before, $fallback: pfe-var(ui--border-width)),\n    BorderWidth--hover: pfe-local(BorderWidth--before--hover, $fallback: calc(#{pfe-var(ui--border-width)} * 2)),\n    BorderStyle: pfe-local(BorderStyle--before, $fallback: pfe-var(ui--border-style)),\n    BorderTopColor: pfe-local(BorderTopColor--before, $fallback: pfe-var(surface--lighter)),\n    BorderRightColor: pfe-local(BorderRightColor--before, $fallback: pfe-var(surface--lighter)),\n    BorderBottomColor: pfe-local(BorderBottomColor--before, $fallback: pfe-var(surface--border--darker)),\n    BorderBottomColor--hover: pfe-local(BorderBottomColor--before--hover, $fallback: pfe-var(ui-base)),\n    BorderLeftColor: pfe-local(BorderLeftColor--before, $fallback: pfe-var(surface--lighter))\n  ),\n  menu: (\n    spacing--horizontal: pfe-local(SpacingHorizontal, $fallback: 0),\n    Background: pfe-local(BackgroundColor, $fallback: pfe-var(surface--lightest)),\n  )\n);\n\n$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, $backwards-compatibility);\n\n:host {\n  position: relative;\n  display: inline-block;\n  max-width: 100%;\n}\n\n:host(:hover:not([is_disabled])) {\n  --pfe-dropdown__before--BorderBottomColor: #{pfe-local(BorderBottomColor--hover, $region: before)};\n}\n\n:host(:active:not([is_disabled])),\n:host(:focus:not([is_disabled])) {\n  --pfe-dropdown__before--BorderBottomColor: #{pfe-local(BorderBottomColor--hover, $region: before)};\n  --pfe-dropdown__before--BorderWidth: #{pfe-local(BorderWidth--hover, $region: before)};\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([is_disabled]) {\n  --pfe-dropdown--BackgroundColor: #{pfe-var(surface--lighter)};\n  --pfe-dropdown--BorderWidth: 0;\n  .pfe-dropdown__container {\n    pointer-events: none;\n  }\n}\n\n.pfe-dropdown {\n  &__toggle {\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    min-width: pfe-local(MinWidth);\n    max-width: pfe-local(MaxWidth);\n    padding: pfe-local(spacing--vertical) pfe-local(spacing--horizontal);\n    font-size: pfe-local(FontSize);\n    font-family: pfe-var(font-family, $fallback: inherit);\n    font-weight: pfe-local(FontWeight);\n    line-height: pfe-var(line-height);\n    color: pfe-local(Color);\n    background-color: pfe-local(BackgroundColor);\n    border: pfe-local(Border);\n    cursor: pointer;\n    &::before {      \n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      content: \"\";\n      border-width: pfe-local(BorderWidth, $region: before);\n      border-style: pfe-local(BorderStyle, $region: before);\n      border-top-color: pfe-local(BorderTopColor, $region: before);\n      border-right-color: pfe-local(BorderRightColor, $region: before);\n      border-bottom-color: pfe-local(BorderBottomColor, $region: before);\n      border-left-color: pfe-local(BorderLeftColor, $region: before);\n    }\n    &-text {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n    &-icon {\n      vertical-align: calc(#{pfe-var(container-spacer)} * -0.125);\n      fill: currentColor;\n      height: pfe-var(icon-size);\n      width: pfe-local(Width, $region: toggle-icon);\n      margin-right: calc(#{pfe-var(container-spacer)} * 0.5);\n      margin-left: pfe-var(container-spacer);\n      line-height: pfe-var(line-height);\n    }\n  }\n  &__menu {\n    display: none;\n    position: absolute;\n    top: calc(100% + 0.25rem);\n    z-index: pfe-zindex(overlay);\n    padding: pfe-local(spacing--vertical, $region: menu) pfe-local(spacing--horizontal, $region: menu);\n    margin: pfe-local(Margin, $region: menu);\n    background: pfe-local(BackgroundColor, $region: menu);\n    background-clip: padding-box;\n    border-width: pfe-local(BorderWidth, $region: menu);\n    border-style: pfe-local(BorderStyle, $region: menu);\n    border-color: pfe-local(BorderColor, $region: menu);\n    box-shadow: pfe-local(BoxShadow, $region: menu);\n    list-style: none;\n    box-sizing: border-box;\n    min-width: pfe-local(MinWidth, $region: menu);\n    &.open {\n      display: block;\n    }\n  }\n}\n",":host {\n  position: relative;\n  display: inline-block;\n  max-width: 100%;\n}\n\n:host(:hover:not([is_disabled])) {\n  --pfe-dropdown__before--BorderBottomColor: var(--pfe-dropdown__before--BorderBottomColor--hover, var(--pfe-dropdown--BorderBottomColor--before--hover, var(--pfe-theme--color--ui-base, #6a6e73)));\n}\n\n:host(:active:not([is_disabled])),\n:host(:focus:not([is_disabled])) {\n  --pfe-dropdown__before--BorderBottomColor: var(--pfe-dropdown__before--BorderBottomColor--hover, var(--pfe-dropdown--BorderBottomColor--before--hover, var(--pfe-theme--color--ui-base, #6a6e73)));\n  --pfe-dropdown__before--BorderWidth: var(--pfe-dropdown__before--BorderWidth--hover, var(--pfe-dropdown--BorderWidth--before--hover, calc(var(--pfe-theme--ui--border-width, 1px) * 2)));\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([is_disabled]) {\n  --pfe-dropdown--BackgroundColor: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n  --pfe-dropdown--BorderWidth: 0;\n}\n\n:host([is_disabled]) .pfe-dropdown__container {\n  pointer-events: none;\n}\n\n.pfe-dropdown__toggle {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  min-width: var(--pfe-dropdown--MinWidth, calc(var(--pfe-theme--container-spacer, 1rem) * 2));\n  max-width: var(--pfe-dropdown--MaxWidth, 100%);\n  padding: var(--pfe-dropdown--spacing--vertical, var(--pfe-dropdown--SpacingHorizontal, calc(var(--pfe-theme--container-padding, 1rem) * .5))) var(--pfe-dropdown--spacing--horizontal, var(--pfe-dropdown--SpacingHorizontal, calc(var(--pfe-theme--container-padding, 1rem) * .5)));\n  font-size: var(--pfe-dropdown--FontSize, var(--pf-global--FontSize--md, 1rem));\n  font-family: var(--pfe-theme--font-family, inherit);\n  font-weight: var(--pfe-dropdown--FontWeight, 400);\n  line-height: var(--pfe-theme--line-height, 1.5);\n  color: var(--pfe-dropdown--Color, var(--pfe-broadcasted--text, #3c3f42));\n  background-color: var(--pfe-dropdown--BackgroundColor, transparent);\n  border: var(--pfe-dropdown--Border, none);\n  cursor: pointer;\n}\n\n.pfe-dropdown__toggle::before {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  content: \"\";\n  border-width: var(--pfe-dropdown__before--BorderWidth, var(--pfe-dropdown--BorderWidth--before, var(--pfe-theme--ui--border-width, 1px)));\n  border-style: var(--pfe-dropdown__before--BorderStyle, var(--pfe-dropdown--BorderStyle--before, var(--pfe-theme--ui--border-style, solid)));\n  border-top-color: var(--pfe-dropdown__before--BorderTopColor, var(--pfe-dropdown--BorderTopColor--before, var(--pfe-theme--color--surface--lighter, #f0f0f0)));\n  border-right-color: var(--pfe-dropdown__before--BorderRightColor, var(--pfe-dropdown--BorderRightColor--before, var(--pfe-theme--color--surface--lighter, #f0f0f0)));\n  border-bottom-color: var(--pfe-dropdown__before--BorderBottomColor, var(--pfe-dropdown--BorderBottomColor--before, var(--pfe-theme--color--surface--border--darker, #6a6e73)));\n  border-left-color: var(--pfe-dropdown__before--BorderLeftColor, var(--pfe-dropdown--BorderLeftColor--before, var(--pfe-theme--color--surface--lighter, #f0f0f0)));\n}\n\n.pfe-dropdown__toggle-text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.pfe-dropdown__toggle-icon {\n  vertical-align: calc(var(--pfe-theme--container-spacer, 1rem) * -0.125);\n  fill: currentColor;\n  height: var(--pfe-theme--icon-size, 1em);\n  width: var(--pfe-dropdown__toggle-icon--Width);\n  margin-right: calc(var(--pfe-theme--container-spacer, 1rem) * 0.5);\n  margin-left: var(--pfe-theme--container-spacer, 1rem);\n  line-height: var(--pfe-theme--line-height, 1.5);\n}\n\n.pfe-dropdown__menu {\n  display: none;\n  position: absolute;\n  top: calc(100% + 0.25rem);\n  z-index: var(--pfe-theme--zindex--overlay, 90);\n  padding: var(--pfe-dropdown__menu--spacing--vertical) var(--pfe-dropdown__menu--spacing--horizontal, var(--pfe-dropdown--SpacingHorizontal, 0));\n  margin: var(--pfe-dropdown__menu--Margin, 0);\n  background: var(--pfe-dropdown__menu--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  background-clip: padding-box;\n  border-width: var(--pfe-dropdown__menu--BorderWidth, var(--pfe-theme--ui--border-width, 1px));\n  border-style: var(--pfe-dropdown__menu--BorderStyle, var(--pfe-theme--ui--border-style, solid));\n  border-color: var(--pfe-dropdown__menu--BorderColor, transparent);\n  box-shadow: var(--pfe-dropdown__menu--BoxShadow, var(--pfe-theme--box-shadow--sm, 0 0.0625rem 0.125rem 0 rgba(3, 3, 3, 0.12), 0 0 0.125rem 0 rgba(3, 3, 3, 0.06)0 0.0625rem 0.125rem 0 rgba(3, 3, 3, 0.2)));\n  list-style: none;\n  box-sizing: border-box;\n  min-width: var(--pfe-dropdown__menu--MinWidth, 100%);\n}\n\n.pfe-dropdown__menu.open {\n  display: block;\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}